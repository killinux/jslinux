         (line   95)
* symbol_ref and /f:                     Flags.              (line  168)
* symbol_ref and /i:                     Flags.              (line  205)
* symbol_ref and /u:                     Flags.              (line   10)
* symbol_ref and /v:                     Flags.              (line  209)
* symbol_ref, RTL sharing:               Sharing.            (line   20)
* SYMBOL_REF_ANCHOR_P:                   Special Accessors.  (line  106)
* SYMBOL_REF_BLOCK:                      Special Accessors.  (line  119)
* SYMBOL_REF_BLOCK_OFFSET:               Special Accessors.  (line  124)
* SYMBOL_REF_CONSTANT:                   Special Accessors.  (line   67)
* SYMBOL_REF_DATA:                       Special Accessors.  (line   71)
* SYMBOL_REF_DECL:                       Special Accessors.  (line   55)
* SYMBOL_REF_EXTERNAL_P:                 Special Accessors.  (line   88)
* SYMBOL_REF_FLAG:                       Flags.              (line  209)
* SYMBOL_REF_FLAG, in TARGET_ENCODE_SECTION_INFO: Sections.  (line  259)
* SYMBOL_REF_FLAGS:                      Special Accessors.  (line   75)
* SYMBOL_REF_FUNCTION_P:                 Special Accessors.  (line   81)
* SYMBOL_REF_HAS_BLOCK_INFO_P:           Special Accessors.  (line  102)
* SYMBOL_REF_LOCAL_P:                    Special Accessors.  (line   84)
* SYMBOL_REF_SMALL_P:                    Special Accessors.  (line   93)
* SYMBOL_REF_TLS_MODEL:                  Special Accessors.  (line   97)
* SYMBOL_REF_USED:                       Flags.              (line  200)
* SYMBOL_REF_WEAK:                       Flags.              (line  205)
* symbolic label:                        Sharing.            (line   20)
* sync_addMODE instruction pattern:      Standard Names.     (line 1444)
* sync_andMODE instruction pattern:      Standard Names.     (line 1444)
* sync_compare_and_swap_ccMODE instruction pattern: Standard Names.
                                                             (line 1431)
* sync_compare_and_swapMODE instruction pattern: Standard Names.
                                                             (line 1413)
* sync_iorMODE instruction pattern:      Standard Names.     (line 1444)
* sync_lock_releaseMODE instruction pattern: Standard Names. (line 1511)
* sync_lock_test_and_setMODE instruction pattern: Standard Names.
                                                             (line 1485)
* sync_nandMODE instruction pattern:     Standard Names.     (line 1444)
* sync_new_addMODE instruction pattern:  Standard Names.     (line 1478)
* sync_new_andMODE instruction pattern:  Standard Names.     (line 1478)
* sync_new_iorMODE instruction pattern:  Standard Names.     (line 1478)
* sync_new_nandMODE instruction pattern: Standard Names.     (line 1478)
* sync_new_subMODE instruction pattern:  Standard Names.     (line 1478)
* sync_new_xorMODE instruction pattern:  Standard Names.     (line 1478)
* sync_old_addMODE instruction pattern:  Standard Names.     (line 1461)
* sync_old_andMODE instruction pattern:  Standard Names.     (line 1461)
* sync_old_iorMODE instruction pattern:  Standard Names.     (line 1461)
* sync_old_nandMODE instruction pattern: Standard Names.     (line 1461)
* sync_old_subMODE instruction pattern:  Standard Names.     (line 1461)
* sync_old_xorMODE instruction pattern:  Standard Names.     (line 1461)
* sync_subMODE instruction pattern:      Standard Names.     (line 1444)
* sync_xorMODE instruction pattern:      Standard Names.     (line 1444)
* SYSROOT_HEADERS_SUFFIX_SPEC:           Driver.             (line  239)
* SYSROOT_SUFFIX_SPEC:                   Driver.             (line  234)
* SYSTEM_INCLUDE_DIR:                    Driver.             (line  408)
* t-TARGET:                              Target Fragment.    (line    6)
* table jump:                            Basic Blocks.       (line   57)
* tablejump instruction pattern:         Standard Names.     (line 1096)
* tag:                                   GTY Options.        (line   81)
* tagging insns:                         Tagging Insns.      (line    6)
* tail calls:                            Tail Calls.         (line    6)
* TAmode:                                Machine Modes.      (line  156)
* target attributes:                     Target Attributes.  (line    6)
* target description macros:             Target Macros.      (line    6)
* target functions:                      Target Structure.   (line    6)
* target hooks:                          Target Structure.   (line    6)
* target makefile fragment:              Target Fragment.    (line    6)
* target specifications:                 Run-time Target.    (line    6)
* TARGET_ADDRESS_COST:                   Costs.              (line  230)
* TARGET_ALIGN_ANON_BITFIELDS:           Storage Layout.     (line  336)
* TARGET_ALLOCATE_INITIAL_VALUE:         Misc.               (line  720)
* TARGET_ARG_PARTIAL_BYTES:              Register Arguments. (line   83)
* TARGET_ARM_EABI_UNWINDER:              Exception Region Output.
                                                             (line  113)
* TARGET_ASM_ALIGNED_DI_OP:              Data Output.        (line   10)
* TARGET_ASM_ALIGNED_HI_OP:              Data Output.        (line    8)
* TARGET_ASM_ALIGNED_SI_OP:              Data Output.        (line    9)
* TARGET_ASM_ALIGNED_TI_OP:              Data Output.        (line   11)
* TARGET_ASM_ASSEMBLE_VISIBILITY:        Label Output.       (line  239)
* TARGET_ASM_BYTE_OP:                    Data Output.        (line    7)
* TARGET_ASM_CAN_OUTPUT_MI_THUNK:        Function Entry.     (line  237)
* TARGET_ASM_CLOSE_PAREN:                Data Output.        (line  130)
* TARGET_ASM_CONSTRUCTOR:                Macros for Initialization.
                                                             (line   69)
* TARGET_ASM_DESTRUCTOR:                 Macros for Initialization.
                                                             (line   83)
* TARGET_ASM_EMIT_EXCEPT_TABLE_LABEL:    Dispatch Tables.    (line   74)
* TARGET_ASM_EMIT_UNWIND_LABEL:          Dispatch Tables.    (line   63)
* TARGET_ASM_EXTERNAL_LIBCALL:           Label Output.       (line  274)
* TARGET_ASM_FILE_END:                   File Framework.     (line   37)
* TARGET_ASM_FILE_START:                 File Framework.     (line    9)
* TARGET_ASM_FILE_START_APP_OFF:         File Framework.     (line   17)
* TARGET_ASM_FILE_START_FILE_DIRECTIVE:  File Framework.     (line   31)
* TARGET_ASM_FUNCTION_BEGIN_EPILOGUE:    Function Entry.     (line   61)
* TARGET_ASM_FUNCTION_END_PROLOGUE:      Function Entry.     (line   55)
* TARGET_ASM_FUNCTION_EPILOGUE:          Function Entry.     (line   68)
* TARGET_ASM_FUNCTION_EPILOGUE and trampolines: Trampolines. (line   70)
* TARGET_ASM_FUNCTION_PROLOGUE:          Function Entry.     (line   11)
* TARGET_ASM_FUNCTION_PROLOGUE and trampolines: Trampolines. (line   70)
* TARGET_ASM_FUNCTION_RODATA_SECTION:    Sections.           (line  206)
* TARGET_ASM_GLOBALIZE_DECL_NAME:        Label Output.       (line  174)
* TARGET_ASM_GLOBALIZE_LABEL:            Label Output.       (line  165)
* TARGET_ASM_INIT_SECTIONS:              Sections.           (line  151)
* TARGET_ASM_INTEGER:                    Data Output.        (line   27)
* TARGET_ASM_INTERNAL_LABEL:             Label Output.       (line  309)
* TARGET_ASM_MARK_DECL_PRESERVED:        Label Output.       (line  280)
* TARGET_ASM_NAMED_SECTION:              File Framework.     (line   89)
* TARGET_ASM_OPEN_PAREN:                 Data Output.        (line  129)
* TARGET_ASM_OUTPUT_ANCHOR:              Anchored Addresses. (line   44)
* TARGET_ASM_OUTPUT_DWARF_DTPREL:        SDB and DWARF.      (line   58)
* TARGET_ASM_OUTPUT_MI_THUNK:            Function Entry.     (line  195)
* TARGET_ASM_RECORD_GCC_SWITCHES:        File Framework.     (line  122)
* TARGET_ASM_RECORD_GCC_SWITCHES_SECTION: File Framework.    (line  166)
* TARGET_ASM_SELECT_RTX_SECTION:         Sections.           (line  214)
* TARGET_ASM_SELECT_SECTION:             Sections.           (line  172)
* TARGET_ASM_TTYPE:                      Exception Region Output.
                                                             (line  107)
* TARGET_ASM_UNALIGNED_DI_OP:            Data Output.        (line   14)
* TARGET_ASM_UNALIGNED_HI_OP:            Data Output.        (line   12)
* TARGET_ASM_UNALIGNED_SI_OP:            Data Output.        (line   13)
* TARGET_ASM_UNALIGNED_TI_OP:            Data Output.        (line   15)
* TARGET_ASM_UNIQUE_SECTION:             Sections.           (line  193)
* TARGET_ATTRIBUTE_TABLE:                Target Attributes.  (line   11)
* TARGET_BINDS_LOCAL_P:                  Sections.           (line  284)
* TARGET_BRANCH_TARGET_REGISTER_CALLEE_SAVED: Misc.          (line  816)
* TARGET_BRANCH_TARGET_REGISTER_CLASS:   Misc.               (line  808)
* TARGET_BUILD_BUILTIN_VA_LIST:          Register Arguments. (line  248)
* TARGET_BUILTIN_RECIPROCAL:             Addressing Modes.   (line  228)
* TARGET_BUILTIN_SETJMP_FRAME_VALUE:     Frame Layout.       (line  109)
* TARGET_C99_FUNCTIONS:                  Library Calls.      (line   77)
* TARGET_CALLEE_COPIES:                  Register Arguments. (line  115)
* TARGET_CANNOT_FORCE_CONST_MEM:         Addressing Modes.   (line  209)
* TARGET_CANNOT_MODIFY_JUMPS_P:          Misc.               (line  795)
* TARGET_COMMUTATIVE_P:                  Misc.               (line  713)
* TARGET_COMP_TYPE_ATTRIBUTES:           Target Attributes.  (line   19)
* TARGET_CPU_CPP_BUILTINS:               Run-time Target.    (line    9)
* TARGET_CXX_ADJUST_CLASS_AT_DEFINITION: C++ ABI.            (line   87)
* TARGET_CXX_CDTOR_RETURNS_THIS:         C++ ABI.            (line   38)
* TARGET_CXX_CLASS_DATA_ALWAYS_COMDAT:   C++ ABI.            (line   62)
* TARGET_CXX_COOKIE_HAS_SIZE:            C++ ABI.            (line   25)
* TARGET_CXX_DETERMINE_CLASS_DATA_VISIBILITY: C++ ABI.       (line   54)
* TARGET_CXX_GET_COOKIE_SIZE:            C++ ABI.            (line   18)
* TARGET_CXX_GUARD_MASK_BIT:             C++ ABI.            (line   12)
* TARGET_CXX_GUARD_TYPE:                 C++ ABI.            (line    7)
* TARGET_CXX_IMPORT_EXPORT_CLASS:        C++ ABI.            (line   30)
* TARGET_CXX_KEY_METHOD_MAY_BE_INLINE:   C++ ABI.            (line   43)
* TARGET_CXX_LIBRARY_RTTI_COMDAT:        C++ ABI.            (line   69)
* TARGET_CXX_USE_AEABI_ATEXIT:           C++ ABI.            (line   74)
* TARGET_CXX_USE_ATEXIT_FOR_CXA_ATEXIT:  C++ ABI.            (line   80)
* TARGET_DECIMAL_FLOAT_SUPPORTED_P:      Storage Layout.     (line  539)
* TARGET_DECLSPEC:                       Target Attributes.  (line   64)
* TARGET_DEFAULT_PACK_STRUCT:            Misc.               (line  482)
* TARGET_DEFAULT_SHORT_ENUMS:            Type Layout.        (line  160)
* TARGET_DEFERRED_OUTPUT_DEFS:           Label Output.       (line  393)
* TARGET_DELEGITIMIZE_ADDRESS:           Addressing Modes.   (line  200)
* TARGET_DLLIMPORT_DECL_ATTRIBUTES:      Target Attributes.  (line   47)
* TARGET_DWARF_CALLING_CONVENTION:       SDB and DWARF.      (line   18)
* TARGET_DWARF_HANDLE_FRAME_UNSPEC:      Frame Layout.       (line  172)
* TARGET_DWARF_REGISTER_SPAN:            Exception Region Output.
                                                             (line   90)
* TARGET_EDOM:                           Library Calls.      (line   59)
* TARGET_ENCODE_SECTION_INFO:            Sections.           (line  235)
* TARGET_ENCODE_SECTION_INFO and address validation: Addressing Modes.
                                                             (line   91)
* TARGET_ENCODE_SECTION_INFO usage:      Instruction Output. (line  100)
* TARGET_EXECUTABLE_SUFFIX:              Misc.               (line  769)
* TARGET_EXPAND_BUILTIN:                 Misc.               (line  665)
* TARGET_EXPAND_BUILTIN_SAVEREGS:        Varargs.            (line   92)
* TARGET_EXPAND_TO_RTL_HOOK:             Storage Layout.     (line  545)
* TARGET_EXPR:                           Expression trees.   (line    6)
* TARGET_EXTRA_INCLUDES:                 Misc.               (line  841)
* TARGET_EXTRA_LIVE_ON_ENTRY:            Tail Calls.         (line   21)
* TARGET_EXTRA_PRE_INCLUDES:             Misc.               (line  848)
* TARGET_FIXED_CONDITION_CODE_REGS:      Condition Code.     (line  142)
* TARGET_FIXED_POINT_SUPPORTED_P:        Storage Layout.     (line  542)
* target_flags:                          Run-time Target.    (line   52)
* TARGET_FLOAT_FORMAT:                   Storage Layout.     (line  410)
* TARGET_FLT_EVAL_METHOD:                Type Layout.        (line  141)
* TARGET_FOLD_BUILTIN:                   Misc.               (line  685)
* TARGET_FORMAT_TYPES:                   Misc.               (line  868)
* TARGET_FUNCTION_ATTRIBUTE_INLINABLE_P: Target Attributes.  (line   86)
* TARGET_FUNCTION_OK_FOR_SIBCALL:        Tail Calls.         (line    8)
* TARGET_FUNCTION_VALUE:                 Scalar Return.      (line   11)
* TARGET_GIMPLIFY_VA_ARG_EXPR:           Register Arguments. (line  253)
* TARGET_HANDLE_C_OPTION:                Run-time Target.    (line   78)
* TARGET_HANDLE_OPTION:                  Run-time Target.    (line   61)
* TARGET_HAS_SINCOS:                     Library Calls.      (line   85)
* TARGET_HAVE_CTORS_DTORS:               Macros for Initialization.
                                                             (line   64)
* TARGET_HAVE_NAMED_SECTIONS:            File Framework.     (line   99)
* TARGET_HAVE_SWITCHABLE_BSS_SECTIONS:   File Framework.     (line  103)
* TARGET_HELP:                           Run-time Target.    (line  141)
* TARGET_IN_SMALL_DATA_P:                Sections.           (line  276)
* TARGET_INIT_BUILTINS:                  Misc.               (line  647)
* TARGET_INIT_DWARF_REG_SIZES_EXTRA:     Exception Region Output.
                                                             (line   99)
* TARGET_INIT_LIBFUNCS:                  Library Calls.      (line   16)
* TARGET_INSERT_ATTRIBUTES:              Target Attributes.  (line   73)
* TARGET_INSTANTIATE_DECLS:              Storage Layout.     (line  553)
* TARGET_INVALID_BINARY_OP:              Misc.               (line  906)
* TARGET_INVALID_CONVERSION:             Misc.               (line  893)
* TARGET_INVALID_UNARY_OP:               Misc.               (line  899)
* TARGET_LIB_INT_CMP_BIASED:             Library Calls.      (line   35)
* TARGET_LIBGCC_CMP_RETURN_MODE:         Storage Layout.     (line  398)
* TARGET_LIBGCC_SDATA_SECTION:           Sections.           (line  123)
* TARGET_LIBGCC_SHIFT_COUNT_MODE:        Storage Layout.     (line  404)
* TARGET_MACHINE_DEPENDENT_REORG:        Misc.               (line  632)
* TARGET_MANGLE_DECL_ASSEMBLER_NAME:     Sections.           (line  225)
* TARGET_MANGLE_TYPE:                    Storage Layout.     (line  557)
* TARGET_MD_ASM_CLOBBERS:                Misc.               (line  548)
* TARGET_MEM_REF:                        Expression trees.   (line    6)
* TARGET_MERGE_DECL_ATTRIBUTES:          Target Attributes.  (line   39)
* TARGET_MERGE_TYPE_ATTRIBUTES:          Target Attributes.  (line   31)
* TARGET_MIN_DIVISIONS_FOR_RECIP_MUL:    Misc.               (line  106)
* TARGET_MODE_REP_EXTENDED:              Misc.               (line  191)
* TARGET_MS_BITFIELD_LAYOUT_P:           Storage Layout.     (line  512)
* TARGET_MUST_PASS_IN_STACK:             Register Arguments. (line   62)
* TARGET_MUST_PASS_IN_STACK, and FUNCTION_ARG: Register Arguments.
                                                             (line   52)
* TARGET_N_FORMAT_TYPES:                 Misc.               (line  873)
* TARGET_NARROW_VOLATILE_BITFIELDS:      Storage Layout.     (line  342)
* TARGET_OBJECT_SUFFIX:                  Misc.               (line  764)
* TARGET_OBJFMT_CPP_BUILTINS:            Run-time Target.    (line   46)
* TARGET_OPTF:                           Misc.               (line  855)
* TARGET_OPTION_TRANSLATE_TABLE:         Driver.             (line   53)
* TARGET_OS_CPP_BUILTINS:                Run-time Target.    (line   42)
* TARGET_PASS_BY_REFERENCE:              Register Arguments. (line  103)
* TARGET_POSIX_IO:                       Misc.               (line  572)
* TARGET_PRETEND_OUTGOING_VARARGS_NAMED: Varargs.            (line  152)
* TARGET_PROMOTE_FUNCTION_ARGS:          Storage Layout.     (line  131)
* TARGET_PROMOTE_FUNCTION_RETURN:        Storage Layout.     (line  136)
* TARGET_PROMOTE_PROTOTYPES:             Stack Arguments.    (line   11)
* TARGET_PTRMEMFUNC_VBIT_LOCATION:       Type Layout.        (line  235)
* TARGET_RELAXED_ORDERING:               Misc.               (line  877)
* TARGET_RESOLVE_OVERLOADED_BUILTIN:     Misc.               (line  675)
* TARGET_RETURN_IN_MEMORY:               Aggregate Return.   (line   16)
* TARGET_RETURN_IN_MSB:                  Scalar Return.      (line   97)
* TARGET_RTX_COSTS:                      Costs.              (line  204)
* TARGET_SCALAR_MODE_SUPPORTED_P:        Register Arguments. (line  265)
* TARGET_SCHED_ADJUST_COST:              Scheduling.         (line   37)
* TARGET_SCHED_ADJUST_PRIORITY:          Scheduling.         (line   52)
* TARGET_SCHED_DEPENDENCIES_EVALUATION_HOOK: Scheduling.     (line   89)
* TARGET_SCHED_DFA_NEW_CYCLE:            Scheduling.         (line  205)
* TARGET_SCHED_DFA_POST_CYCLE_ADVANCE:   Scheduling.         (line  160)
* TARGET_SCHED_DFA_POST_CYCLE_INSN:      Scheduling.         (line  144)
* TARGET_SCHED_DFA_PRE_CYCLE_ADVANCE:    Scheduling.         (line  153)
* TARGET_SCHED_DFA_PRE_CYCLE_INSN:       Scheduling.         (line  132)
* TARGET_SCHED_FINISH:                   Scheduling.         (line  109)
* TARGET_SCHED_FINISH_GLOBAL:            Scheduling.         (line  126)
* TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD: Scheduling.
                                                             (line  168)
* TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD_GUARD: Scheduling.
                                                             (line  196)
* TARGET_SCHED_FIRST_CYCLE_MULTIPASS_DFA_LOOKAHEAD_GUARD_SPEC: Scheduling.
                                                             (line  277)
* TARGET_SCHED_GEN_CHECK:                Scheduling.         (line  265)
* TARGET_SCHED_H_I_D_EXTENDED:           Scheduling.         (line  241)
* TARGET_SCHED_INIT:                     Scheduling.         (line   99)
* TARGET_SCHED_INIT_DFA_POST_CYCLE_INSN: Scheduling.         (line  149)
* TARGET_SCHED_INIT_DFA_PRE_CYCLE_INSN:  Scheduling.         (line  141)
* TARGET_SCHED_INIT_GLOBAL:              Scheduling.         (line  118)
* TARGET_SCHED_IS_COSTLY_DEPENDENCE:     Scheduling.         (line  219)
* TARGET_SCHED_ISSUE_RATE:               Scheduling.         (line   12)
* TARGET_SCHED_NEEDS_BLOCK_P:            Scheduling.         (line  258)
* TARGET_SCHED_REORDER:                  Scheduling.         (line   60)
* TARGET_SCHED_REORDER2:                 Scheduling.         (line   77)
* TARGET_SCHED_SET_SCHED_FLAGS:          Scheduling.         (line  288)
* TARGET_SCHED_SMS_RES_MII:              Scheduling.         (line  299)
* TARGET_SCHED_SPECULATE_INSN:           Scheduling.         (line  247)
* TARGET_SCHED_VARIABLE_ISSUE:           Scheduling.         (line   24)
* TARGET_SECONDARY_RELOAD:               Register Classes.   (line  257)
* TARGET_SECTION_TYPE_FLAGS:             File Framework.     (line  109)
* TARGET_SET_CURRENT_FUNCTION:           Misc.               (line  747)
* TARGET_SET_DEFAULT_TYPE_ATTRIBUTES:    Target Attributes.  (line   26)
* TARGET_SETUP_INCOMING_VARARGS:         Varargs.            (line  101)
* TARGET_SHIFT_TRUNCATION_MASK:          Misc.               (line  154)
* TARGET_SPLIT_COMPLEX_ARG:              Register Arguments. (line  236)
* TARGET_STACK_PROTECT_FAIL:             Stack Smashing Protection.
                                                             (line   17)
* TARGET_STACK_PROTECT_GUARD:            Stack Smashing Protection.
                                                             (line    7)
* TARGET_STRICT_ARGUMENT_NAMING:         Varargs.            (line  137)
* TARGET_STRUCT_VALUE_RTX:               Aggregate Return.   (line   44)
* TARGET_UNSPEC_MAY_TRAP_P:              Misc.               (line  739)
* TARGET_UNWIND_EMIT:                    Dispatch Tables.    (line   81)
* TARGET_UNWIND_INFO:                    Exception Region Output.
                                                             (line   56)
* TARGET_USE_ANCHORS_FOR_SYMBOL_P:       Anchored Addresses. (line   55)
* TARGET_USE_BLOCKS_FOR_CONSTANT_P:      Addressing Modes.   (line  221)
* TARGET_USE_JCR_SECTION:                Misc.               (line  911)
* TARGET_USE_LOCAL_THUNK_ALIAS_P:        Misc.               (line  861)
* TARGET_USES_WEAK_UNWIND_INFO:          Exception Handling. (line  129)
* TARGET_VALID_DLLIMPORT_ATTRIBUTE_P:    Target Attributes.  (line   59)
* TARGET_VALID_POINTER_MODE:             Register Arguments. (line  259)
* TARGET_VECTOR_MODE_SUPPORTED_P:        Register Arguments. (line  277)
* TARGET_VECTOR_OPAQUE_P:                Storage Layout.     (line  505)
* TARGET_VECTORIZE_BUILTIN_CONVERSION:   Addressing Modes.   (line  288)
* TARGET_VECTORIZE_BUILTIN_MASK_FOR_LOAD: Addressing Modes.  (line  237)
* TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_EVEN: Addressing Modes. (line  263)
* TARGET_VECTORIZE_BUILTIN_MUL_WIDEN_ODD: Addressing Modes.  (line  275)
* TARGET_VECTORIZE_BUILTIN_VECTORIZED_FUNCTION: Addressing Modes.
                                                             (line  303)
* TARGET_VERSION:                        Run-time Target.    (line   91)
* TARGET_VTABLE_DATA_ENTRY_DISTANCE:     Type Layout.        (line  288)
* TARGET_VTABLE_ENTRY_ALIGN:             Type Layout.        (line  282)
* TARGET_VTABLE_USES_DESCRIPTORS:        Type Layout.        (line  271)
* TARGET_WEAK_NOT_IN_ARCHIVE_TOC:        Label Output.       (line  245)
* targetm:                               Target Structure.   (line    7)
* targets, makefile:                     Makefile.           (line    6)
* TCmode:                                Machine Modes.      (line  197)
* TDmode:                                Machine Modes.      (line   94)
* TEMPLATE_DECL:                         Declarations.       (line    6)
* Temporaries:                           Temporaries.        (line    6)
* termination routines:                  Initialization.     (line    6)
* testing constraints:                   C Constraint Interface.
                                                             (line    6)
* TEXT_SECTION_ASM_OP:                   Sections.           (line   38)
* TF_SIZE:                               Type Layout.        (line  132)
* TFmode:                                Machine Modes.      (line   98)
* THEN_CLAUSE:                           Function Bodies.    (line    6)
* THREAD_MODEL_SPEC:                     Driver.             (line  225)
* THROW_EXPR:                            Expression trees.   (line    6)
* THUNK_DECL:                            Declarations.       (line    6)
* THUNK_DELTA:                           Declarations.       (line    6)
* TImode:                                Machine Modes.      (line   48)
* TImode, in insn:                       Insns.              (line  231)
* tm.h macros:                           Target Macros.      (line    6)
* TQFmode:                               Machine Modes.      (line   62)
* TQmode:                                Machine Modes.      (line  119)
* TRAMPOLINE_ADJUST_ADDRESS:             Trampolines.        (line   62)
* TRAMPOLINE_ALIGNMENT:                  Trampolines.        (line   49)
* TRAMPOLINE_SECTION:                    Trampolines.        (line   40)
* TRAMPOLINE_SIZE:                       Trampolines.        (line   45)
* TRAMPOLINE_TEMPLATE:                   Trampolines.        (line   29)
* trampolines for nested functions:      Trampolines.        (line    6)
* TRANSFER_FROM_TRAMPOLINE:              Trampolines.        (line  124)
* trap instruction pattern:              Standard Names.     (line 1368)
* tree <1>:                              Macros and Functions.
                                                             (line    6)
* tree:                                  Tree overview.      (line    6)
* Tree SSA:                              Tree SSA.           (line    6)
* TREE_CODE:                             Tree overview.      (line    6)
* TREE_FILENAME:                         Working with declarations.
                                                             (line   14)
* tree_int_cst_equal:                    Expression trees.   (line    6)
* TREE_INT_CST_HIGH:                     Expression trees.   (line    6)
* TREE_INT_CST_LOW:                      Expression trees.   (line    6)
* tree_int_cst_lt:                       Expression trees.   (line    6)
* TREE_LINENO:                           Working with declarations.
                                                             (line   20)
* TREE_LIST:                             Containers.         (line    6)
* TREE_OPERAND:                          Expression trees.   (line    6)
* TREE_PUBLIC:                           Function Basics.    (line    6)
* TREE_PURPOSE:                          Containers.         (line    6)
* TREE_STRING_LENGTH:                    Expression trees.   (line    6)
* TREE_STRING_POINTER:                   Expression trees.   (line    6)
* TREE_TYPE <1>:                         Expression trees.   (line    6)
* TREE_TYPE <2>:                         Function Basics.    (line  171)
* TREE_TYPE <3>:                         Working with declarations.
                                                             (line   11)
* TREE_TYPE:                             Types.              (line    6)
* TREE_VALUE:                            Containers.         (line    6)
* TREE_VEC:                              Containers.         (line    6)
* TREE_VEC_ELT:                          Containers.         (line    6)
* TREE_VEC_LENGTH:                       Containers.         (line    6)
* Trees:                                 Trees.              (line    6)
* TRULY_NOOP_TRUNCATION:                 Misc.               (line  177)
* TRUNC_DIV_EXPR:                        Expression trees.   (line    6)
* TRUNC_MOD_EXPR:                        Expression trees.   (line    6)
* truncate:                              Conversions.        (line   38)
* truncMN2 instruction pattern:          Standard Names.     (line  815)
* TRUTH_AND_EXPR:                        Expression trees.   (line    6)
* TRUTH_ANDIF_EXPR:                      Expression trees.   (line    6)
* TRUTH_NOT_EXPR:                        Expression trees.   (line    6)
* TRUTH_OR_EXPR:                         Expression trees.   (line    6)
* TRUTH_ORIF_EXPR:                       Expression trees.   (line    6)
* TRUTH_XOR_EXPR:                        Expression trees.   (line    6)
* TRY_BLOCK:                             Function Bodies.    (line    6)
* TRY_HANDLERS:                          Function Bodies.    (line    6)
* TRY_STMTS:                             Function Bodies.    (line    6)
* tstM instruction pattern:              Standard Names.     (line  657)
* type:                                  Types.              (line    6)
* type declaration:                      Declarations.       (line    6)
* TYPE_ALIGN:                            Types.              (line    6)
* TYPE_ARG_TYPES:                        Types.              (line    6)
* TYPE_ASM_OP:                           Label Output.       (line   55)
* TYPE_ATTRIBUTES:                       Attributes.         (line   25)
* TYPE_BINFO:                            Classes.            (line    6)
* TYPE_BUILT_IN:                         Types.              (line   83)
* TYPE_CANONICAL:                        Types.              (line    6)
* TYPE_CONTEXT:                          Types.              (line    6)
* TYPE_DECL:                             Declarations.       (line    6)
* TYPE_FIELDS <1>:                       Classes.            (line    6)
* TYPE_FIELDS:                           Types.              (line    6)
* TYPE_HAS_ARRAY_NEW_OPERATOR:           Classes.            (line   91)
* TYPE_HAS_DEFAULT_CONSTRUCTOR:          Classes.            (line   76)
* TYPE_HAS_MUTABLE_P:                    Classes.            (line   81)
* TYPE_HAS_NEW_OPERATOR:                 Classes.            (line   88)
* TYPE_MAIN_VARIANT:                     Types.              (line    6)
* TYPE_MAX_VALUE:                        Types.              (line    6)
* TYPE_METHOD_BASETYPE:                  Types.              (line    6)
* TYPE_METHODS:                          Classes.            (line    6)
* TYPE_MIN_VALUE:                        Types.              (line    6)
* TYPE_NAME:                             Types.              (line    6)
* TYPE_NOTHROW_P:                        Function Basics.    (line  180)
* TYPE_OFFSET_BASETYPE:                  Types.              (line    6)
* TYPE_OPERAND_FMT:                      Label Output.       (line   66)
* TYPE_OVERLOADS_ARRAY_REF:              Classes.            (line   99)
* TYPE_OVERLOADS_ARROW:                  Classes.            (line  102)
* TYPE_OVERLOADS_CALL_EXPR:              Classes.            (line   95)
* TYPE_POLYMORPHIC_P:                    Classes.            (line   72)
* TYPE_PRECISION:                        Types.              (line    6)
* TYPE_PTR_P:                            Types.              (line   89)
* TYPE_PTRFN_P:                          Types.              (line   93)
* TYPE_PTRMEM_P:                         Types.              (line    6)
* TYPE_PTROB_P:                          Types.              (line   96)
* TYPE_PTROBV_P:                         Types.              (line    6)
* TYPE_QUAL_CONST:                       Types.              (line    6)
* TYPE_QUAL_RESTRICT:                    Types.              (line    6)
* TYPE_QUAL_VOLATILE:                    Types.              (line    6)
* TYPE_RAISES_EXCEPTIONS:                Function Basics.    (line  175)
* TYPE_SIZE:                             Types.              (line    6)
* TYPE_STRUCTURAL_EQUALITY_P:            Types.              (line    6)
* TYPE_UNQUALIFIED:                      Types.              (line    6)
* TYPE_VFIELD:                           Classes.            (line    6)
* TYPENAME_TYPE:                         Types.              (line    6)
* TYPENAME_TYPE_FULLNAME:                Types.              (line    6)
* TYPEOF_TYPE:                           Types.              (line    6)
* UDAmode:                               Machine Modes.      (line  168)
* udiv:                                  Arithmetic.         (line  125)
* udivM3 instruction pattern:            Standard Names.     (line  222)
* udivmodM4 instruction pattern:         Standard Names.     (line  428)
* udot_prodM instruction pattern:        Standard Names.     (line  265)
* UDQmode:                               Machine Modes.      (line  136)
* UHAmode:                               Machine Modes.      (line  160)
* UHQmode:                               Machine Modes.      (line  128)
* UINTMAX_TYPE:                          Type Layout.        (line  224)
* umaddMN4 instruction pattern:          Standard Names.     (line  375)
* umax:                                  Arithmetic.         (line  144)
* umaxM3 instruction pattern:            Standard Names.     (line  222)
* umin:                                  Arithmetic.         (line  144)
* uminM3 instruction pattern:            Standard Names.     (line  222)
* umod:                                  Arithmetic.         (line  131)
* umodM3 instruction pattern:            Standard Names.     (line  222)
* umsubMN4 instruction pattern:          Standard Names.     (line  399)
* umulhisi3 instruction pattern:         Standard Names.     (line  347)
* umulM3_highpart instruction pattern:   Standard Names.     (line  361)
* umulqihi3 instruction pattern:         Standard Names.     (line  347)
* umulsidi3 instruction pattern:         Standard Names.     (line  347)
* unchanging:                            Flags.              (line  299)
* unchanging, in call_insn:              Flags.              (line   19)
* unchanging, in jump_insn, call_insn and insn: Flags.       (line   24)
* unchanging, in mem:                    Flags.              (line  137)
* unchanging, in subreg:                 Flags.              (line  173)
* unchanging, in symbol_ref:             Flags.              (line   10)
* UNEQ_EXPR:                             Expression trees.   (line    6)
* UNGE_EXPR:                             Expression trees.   (line    6)
* UNGT_EXPR:                             Expression trees.   (line    6)
* UNION_TYPE <1>:                        Classes.            (line    6)
* UNION_TYPE:                            Types.              (line    6)
* unions, returning:                     Interface.          (line   10)
* UNITS_PER_SIMD_WORD:                   Storage Layout.     (line   77)
* UNITS_PER_WORD:                        Storage Layout.     (line   67)
* UNKNOWN_TYPE:                          Types.              (line    6)
* UNLE_EXPR:                             Expression trees.   (line    6)
* UNLIKELY_EXECUTED_TEXT_SECTION_NAME:   Sections.           (line   49)
* UNLT_EXPR:                             Expression trees.   (line    6)
* UNORDERED_EXPR:                        Expression trees.   (line    6)
* unshare_all_rtl:                       Sharing.            (line   58)
* unsigned division:                     Arithmetic.         (line  125)
* unsigned division with unsigned saturation: Arithmetic.    (line  125)
* unsigned greater than:                 Comparisons.        (line   64)
* unsigned less than:                    Comparisons.        (line   68)
* unsigned minimum and maximum:          Arithmetic.         (line  144)
* unsigned_fix:                          Conversions.        (line   72)
* unsigned_float:                        Conversions.        (line   62)
* unsigned_fract_convert:                Conversions.        (line   98)
* unsigned_sat_fract:                    Conversions.        (line  104)
* unspec:                                Side Effects.       (line  284)
* unspec_volatile:                       Side Effects.       (line  284)
* untyped_call instruction pattern:      Standard Names.     (line 1006)
* untyped_return instruction pattern:    Standard Names.     (line 1056)
* UPDATE_PATH_HOST_CANONICALIZE (PATH):  Filesystem.         (line   59)
* update_ssa:                            SSA.                (line   76)
* update_stmt:                           Statement Operands. (line    6)
* UQQmode:                               Machine Modes.      (line  123)
* US Software GOFAST, floating point emulation library: Library Calls.
                                                             (line   44)
* us_ashift:                             Arithmetic.         (line  168)
* us_minus:                              Arithmetic.         (line   36)
* us_mult:                               Arithmetic.         (line   92)
* us_neg:                                Arithmetic.         (line   81)
* us_plus:                               Arithmetic.         (line   14)
* US_SOFTWARE_GOFAST:                    Library Calls.      (line   45)
* us_truncate:                           Conversions.        (line   48)
* usaddM3 instruction pattern:           Standard Names.     (line  222)
* USAmode:                               Machine Modes.      (line  164)
* usashlM3 instruction pattern:          Standard Names.     (line  431)
* usdivM3 instruction pattern:           Standard Names.     (line  222)
* use:                                   Side Effects.       (line  159)
* USE_C_ALLOCA:                          Host Misc.          (line   19)
* USE_LD_AS_NEEDED:                      Driver.             (line  198)
* USE_LOAD_POST_DECREMENT:               Costs.              (line  159)
* USE_LOAD_POST_INCREMENT:               Costs.              (line  154)
* USE_LOAD_PRE_DECREMENT:                Costs.              (line  169)
* USE_LOAD_PRE_INCREMENT:                Costs.              (line  164)
* use_param:                             GTY Options.        (line  113)
* use_paramN:                            GTY Options.        (line  131)
* use_params:                            GTY Options.        (line  139)
* USE_SELECT_SECTION_FOR_FUNCTIONS:      Sections.           (line  185)
* USE_STORE_POST_DECREMENT:              Costs.              (line  179)
* USE_STORE_POST_INCREMENT:              Costs.              (line  174)
* USE_STORE_PRE_DECREMENT:               Costs.              (line  189)
* USE_STORE_PRE_INCREMENT:               Costs.              (line  184)
* used:                                  Flags.              (line  317)
* used, in symbol_ref:                   Flags.              (line  200)
* USER_LABEL_PREFIX:                     Instruction Output. (line  126)
* USING_DECL:                            Declarations.       (line    6)
* USING_STMT:                            Function Bodies.    (line    6)
* usmaddMN4 instruction pattern:         Standard Names.     (line  383)
* usmsubMN4 instruction pattern:         Standard Names.     (line  407)
* usmulhisi3 instruction pattern:        Standard Names.     (line  351)
* usmulM3 instruction pattern:           Standard Names.     (line  222)
* usmulqihi3 instruction pattern:        Standard Names.     (line  351)
* usmulsidi3 instruction pattern:        Standard Names.     (line  351)
* usnegM2 instruction pattern:           Standard Names.     (line  445)
* USQmode:                               Machine Modes.      (line  132)
* ussubM3 instruction pattern:           Standard Names.     (line  222)
* usum_widenM3 instruction pattern:      Standard Names.     (line  275)
* UTAmode:                               Machine Modes.      (line  172)
* UTQmode:                               Machine Modes.      (line  140)
* V in constraint:                       Simple Constraints. (line   41)
* VA_ARG_EXPR:                           Expression trees.   (line    6)
* values, returned by functions:         Scalar Return.      (line    6)
* VAR_DECL <1>:                          Expression trees.   (line    6)
* VAR_DECL:                              Declarations.       (line    6)
* varargs implementation:                Varargs.            (line    6)
* variable:                              Declarations.       (line    6)
* VAX_FLOAT_FORMAT:                      Storage Layout.     (line  418)
* vec_concat:                            Vector Operations.  (line   25)
* vec_duplicate:                         Vector Operations.  (line   30)
* VEC_EXTRACT_EVEN_EXPR:                 Expression trees.   (line    6)
* vec_extract_evenM instruction pattern: Standard Names.     (line  176)
* VEC_EXTRACT_ODD_EXPR:                  Expression trees.   (line    6)
* vec_extract_oddM instruction pattern:  Standard Names.     (line  183)
* vec_extractM instruction pattern:      Standard Names.     (line  171)
* vec_initM instruction pattern:         Standard Names.     (line  204)
* VEC_INTERLEAVE_HIGH_EXPR:              Expression trees.   (line    6)
* vec_interleave_highM instruction pattern: Standard Names.  (line  190)
* VEC_INTERLEAVE_LOW_EXPR:               Expression trees.   (line    6)
* vec_interleave_lowM instruction pattern: Standard Names.   (line  197)
* VEC_LSHIFT_EXPR:                       Expression trees.   (line    6)
* vec_merge:                             Vector Operations.  (line   11)
* VEC_PACK_FIX_TRUNC_EXPR:               Expression trees.   (line    6)
* VEC_PACK_SAT_EXPR:                     Expression trees.   (line    6)
* vec_pack_sfix_trunc_M instruction pattern: Standard Names. (line  302)
* vec_pack_ssat_M instruction pattern:   Standard Names.     (line  295)
* VEC_PACK_TRUNC_EXPR:                   Expression trees.   (line    6)
* vec_pack_trunc_M instruction pattern:  Standard Names.     (line  288)
* vec_pack_ufix_trunc_M instruction pattern: Standard Names. (line  302)
* vec_pack_usat_M instruction pattern:   Standard Names.     (line  295)
* VEC_RSHIFT_EXPR:                       Expression trees.   (line    6)
* vec_select:                            Vector Operations.  (line   19)
* vec_setM instruction pattern:          Standard Names.     (line  166)
* vec_shl_M instruction pattern:         Standard Names.     (line  282)
* vec_shr_M instruction pattern:         Standard Names.     (line  282)
* VEC_UNPACK_FLOAT_HI_EXPR:              Expression trees.   (line    6)
* VEC_UNPACK_FLOAT_LO_EXPR:              Expression trees.   (line    6)
* VEC_UNPACK_HI_EXPR:                    Expression trees.   (line    6)
* VEC_UNPACK_LO_EXPR:                    Expression trees.   (line    6)
* vec_unpacks_float_hi_M instruction pattern: Standard Names.
                                                             (line  324)
* vec_unpacks_float_lo_M instruction pattern: Standard Names.
                                                             (line  324)
* vec_unpacks_hi_M instruction pattern:  Standard Names.     (line  309)
* vec_unpacks_lo_M instruction pattern:  Standard Names.     (line  309)
* vec_unpacku_float_hi_M instruction pattern: Standard Names.
                                                             (line  324)
* vec_unpacku_float_lo_M instruction pattern: Standard Names.
                                                             (line  324)
* vec_unpacku_hi_M instruction pattern:  Standard Names.     (line  317)
* vec_unpacku_lo_M instruction pattern:  Standard Names.     (line  317)
* VEC_WIDEN_MULT_HI_EXPR:                Expression trees.   (line    6)
* VEC_WIDEN_MULT_LO_EXPR:                Expression trees.   (line    6)
* vec_widen_smult_hi_M instruction pattern: Standard Names.  (line  333)
* vec_widen_smult_lo_M instruction pattern: Standard Names.  (line  333)
* vec_widen_umult_hi_M instruction pattern: Standard Names.  (line  333)
* vec_widen_umult_lo__M instruction pattern: Standard Names. (line  333)
* vector:                                Containers.         (line    6)
* vector operations:                     Vector Operations.  (line    6)
* VECTOR_CST:                            Expression trees.   (line    6)
* VECTOR_STORE_FLAG_VALUE:               Misc.               (line  308)
* virtual operands:                      Statement Operands. (line    6)
* VIRTUAL_INCOMING_ARGS_REGNUM:          Regs and Memory.    (line   59)
* VIRTUAL_OUTGOING_ARGS_REGNUM:          Regs and Memory.    (line   87)
* VIRTUAL_STACK_DYNAMIC_REGNUM:          Regs and Memory.    (line   78)
* VIRTUAL_STACK_VARS_REGNUM:             Regs and Memory.    (line   69)
* VLIW:                                  Processor pipeline description.
                                                             (line    6)
* VMS:                                   Filesystem.         (line   37)
* VMS_DEBUGGING_INFO:                    VMS Debug.          (line    9)
* VOID_TYPE:                             Types.              (line    6)
* VOIDmode:                              Machine Modes.      (line  190)
* volatil:                               Flags.              (line  331)
* volatil, in insn, call_insn, jump_insn, code_label, barrier, and note: Flags.
                                                             (line   29)
* volatil, in label_ref and reg_label:   Flags.              (line   50)
* volatil, in mem, asm_operands, and asm_input: Flags.       (line   79)
* volatil, in reg:                       Flags.              (line  101)
* volatil, in subreg:                    Flags.              (line  173)
* volatil, in symbol_ref:                Flags.              (line  209)
* volatile memory references:            Flags.              (line  332)
* voting between constraint alternatives: Class Preferences. (line    6)
* walk_dominator_tree:                   SSA.                (line  259)
* walk_use_def_chains:                   SSA.                (line  235)
* WCHAR_TYPE:                            Type Layout.        (line  192)
* WCHAR_TYPE_SIZE:                       Type Layout.        (line  200)
* which_alternative:                     Output Statement.   (line   59)
* WHILE_BODY:                            Function Bodies.    (line    6)
* WHILE_COND:                            Function Bodies.    (line    6)
* WHILE_STMT:                            Function Bodies.    (line    6)
* WIDEST_HARDWARE_FP_SIZE:               Type Layout.        (line  147)
* WINT_TYPE:                             Type Layout.        (line  205)
* word_mode:                             Machine Modes.      (line  336)
* WORD_REGISTER_OPERATIONS:              Misc.               (line   63)
* WORD_SWITCH_TAKES_ARG:                 Driver.             (line   20)
* WORDS_BIG_ENDIAN:                      Storage Layout.     (line   29)
* WORDS_BIG_ENDIAN, effect on subreg:    Regs and Memory.    (line  132)
* X in constraint:                       Simple Constraints. (line  112)
* x-HOST:                                Host Fragment.      (line    6)
* XCmode:                                Machine Modes.      (line  197)
* XCOFF_DEBUGGING_INFO:                  DBX Options.        (line   13)
* XEXP:                                  Accessors.          (line    6)
* XF_SIZE:                               Type Layout.        (line  131)
* XFmode:                                Machine Modes.      (line   79)
* XINT:                                  Accessors.          (line    6)
* xm-MACHINE.h <1>:                      Host Misc.          (line    6)
* xm-MACHINE.h:                          Filesystem.         (line    6)
* xor:                                   Arithmetic.         (line  163)
* xor, canonicalization of:              Insn Canonicalizations.
                                                             (line   84)
* xorM3 instruction pattern:             Standard Names.     (line  222)
* XSTR:                                  Accessors.          (line    6)
* XVEC:                                  Accessors.          (line   41)
* XVECEXP:                               Accessors.          (line   48)
* XVECLEN:                               Accessors.          (line   44)
* XWINT:                                 Accessors.          (line    6)
* zero_extend:                           Conversions.        (line   28)
* zero_extendMN2 instruction pattern:    Standard Names.     (line  825)
* zero_extract:                          Bit-Fields.         (line   30)
* zero_extract, canonicalization of:     Insn Canonicalizations.
                                                             (line   96)



Tag Table:
Node: Top2150
Node: Contributing5059
Node: Portability5800
Node: Interface7588
Node: Libgcc10628
Node: Integer library routines12469
Node: Soft float library routines19308
Node: Decimal float library routines31245
Node: Fixed-point fractional library routines46998
Node: Exception handling routines147396
Node: Miscellaneous routines148503
Node: Languages148886
Node: Source Tree150433
Node: Configure Terms151052
Node: Top Level154010
Node: gcc Directory156358
Node: Subdirectories157327
Node: Configuration159665
Node: Config Fragments160385
Node: System Config161729
Node: Configuration Files162665
Node: Build165240
Node: Makefile165652
Ref: Makefile-Footnote-1172370
Ref: Makefile-Footnote-2172519
Node: Library Files172593
Node: Headers173155
Node: Documentation175238
Node: Texinfo Manuals176097
Node: Man Page Generation178435
Node: Miscellaneous Docs180350
Node: Front End181649
Node: Front End Directory185350
Node: Front End Config190343
Node: Back End193257
Node: Testsuites196934
Node: Test Idioms197798
Node: Test Directives201199
Node: Ada Tests213006
Node: C Tests214298
Node: libgcj Tests218653
Node: gcov Testing219785
Node: profopt Testing222769
Node: compat Testing224212
Node: Torture Tests228456
Node: Options229848
Node: Option file format230289
Node: Option properties232839
Node: Passes238498
Node: Parsing pass239240
Node: Gimplification pass242768
Node: Pass manager244595
Node: Tree SSA passes245923
Node: RTL passes267734
Node: Trees279334
Node: Deficiencies282065
Node: Tree overview282302
Node: Macros and Functions286425
Node: Identifiers286571
Node: Containers288096
Node: Types289251
Node: Scopes304954
Node: Namespaces305716
Node: Classes308528
Node: Declarations313285
Node: Working with declarations313780
Node: Internal structure320237
Node: Current structure hierarchy320619
Node: Adding new DECL node types322711
Node: Functions326782
Node: Function Basics329185
Node: Function Bodies336350
Node: Attributes347592
Node: Expression trees348833
Node: Tree SSA391442
Node: GENERIC393283
Node: GIMPLE394893
Node: Interfaces396184
Node: Temporaries398337
Ref: Temporaries-Footnote-1399657
Node: GIMPLE Expressions399720
Node: Compound Expressions400492
Node: Compound Lvalues400740
Node: Conditional Expressions401520
Node: Logical Operators402197
Node: Statements402690
Node: Blocks403398
Node: Statement Sequences404815
Node: Empty Statements405152
Node: Loops405730
Node: Selection Statements405974
Node: Jumps406827
Node: Cleanups407488
Node: GIMPLE Exception Handling409279
Node: GIMPLE Example411158
Node: Rough GIMPLE Grammar412569
Node: Annotations417918
Node: Statement Operands418584
Node: SSA433145
Node: Alias analysis445503
Node: Loop Analysis and Representation452962
Node: Loop representation454016
Node: Loop querying460936
Node: Loop manipulation463769
Node: LCSSA466137
Node: Scalar evolutions468209
Node: loop-iv471453
Node: Number of iterations473379
Node: Dependency analysis476188
Node: Lambda482556
Node: Omega484226
Node: RTL485791
Node: RTL Objects487909
Node: RTL Classes491783
Node: Accessors496735
Node: Special Accessors499129
Node: Flags504347
Node: Machine Modes519583
Node: Constants531899
Node: Regs and Memory538544
Node: Arithmetic552086
Node: Comparisons561606
Node: Bit-Fields565898
Node: Vector Operations567450
Node: Conversions569076
Node: RTL Declarations573586
Node: Side Effects574407
Node: Incdec590523
Node: Assembler593863
Node: Insns595395
Node: Calls621325
Node: Sharing623918
Node: Reading RTL627028
Node: Control Flow628018
Node: Basic Blocks629013
Node: Edges633581
Node: Profile information642143
Node: Maintaining the CFG646829
Node: Liveness information653721
Node: Machine Desc655848
Node: Overview658330
Node: Patterns660371
Node: Example663809
Node: RTL Template665244
Node: Output Template675899
Node: Output Statement679865
Node: Predicates683827
Node: Machine-Independent Predicates686745
Node: Defining Predicates691377
Node: Constraints697342
Node: Simple Constraints698503
Node: Multi-Alternative710565
Node: Class Preferences713406
Node: Modifiers714298
Node: Machine Constraints718424
Node: Define Constraints750570
Node: C Constraint Interface757350
Node: Standard Names760970
Ref: shift patterns779898
Ref: prologue instruction pattern820547
Ref: epilogue instruction pattern821040
Node: Pattern Ordering830583
Node: Dependent Patterns831819
Node: Jump Patterns834633
Node: Looping Patterns840329
Node: Insn Canonicalizations844931
Node: Expander Definitions849315
Node: Insn Splitting857433
Node: Including Patterns867029
Node: Peephole Definitions868809
Node: define_peephole870062
Node: define_peephole2876393
Node: Insn Attributes879460
Node: Defining Attributes880566
Node: Expressions882583
Node: Tagging Insns889185
Node: Attr Example893538
Node: Insn Lengths895912
Node: Constant Attributes898971
Node: Delay Slots900140
Node: Processor pipeline description903364
Ref: Processor pipeline description-Footnote-1920730
Node: Conditional Execution921060
Node: Constant Definitions923913
Node: Iterators925508
Node: Mode Iterators925955
Node: Defining Mode Iterators926917
Node: Substitutions928411
Node: Examples930652
Node: Code Iterators932100
Node: Target Macros934357
Node: Target Structure937309
Node: Driver938578
Node: Run-time Target962259
Node: Per-Function Data969463
Node: Storage Layout972226
Node: Type Layout998847
Node: Registers1011804
Node: Register Basics1012727
Node: Allocation Order1018294
Node: Values in Registers1019739
Node: Leaf Functions1026844
Node: Stack Registers1029702
Node: Register Classes1030818
Node: Old Constraints1056393
Node: Stack and Calling1063545
Node: Frame Layout1064079
Node: Exception Handling1074926
Node: Stack Checking1081304
Node: Frame Registers1084935
Node: Elimination1091541
Node: Stack Arguments1095572
Node: Register Arguments1102173
Node: Scalar Return1116397
Node: Aggregate Return1121682
Node: Caller Saves1125341
Node: Function Entry1126519
Node: Profiling1139134
Node: Tail Calls1140833
Node: Stack Smashing Protection1142200
Node: Varargs1143312
Node: Trampolines1151272
Node: Library Calls1157938
Node: Addressing Modes1162801
Node: Anchored Addresses1178059
Node: Condition Code1180720
Node: Costs1189009
Node: Scheduling1201732
Node: Sections1218479
Node: PIC1233129
Node: Assembler Format1235119
Node: File Framework1236198
Ref: TARGET_HAVE_SWITCHABLE_BSS_SECTIONS1241104
Node: Data Output1244371
Node: Uninitialized Data1252130
Node: Label Output1257201
Node: Initialization1278868
Node: Macros for Initialization1284830
Node: Instruction Output1291282
Node: Dispatch Tables1300276
Node: Exception Region Output1304071
Node: Alignment Output1309831
Node: Debugging Info1313994
Node: All Debuggers1314664
Node: DBX Options1317519
Node: DBX Hooks1322968
Node: File Names and DBX1324894
Node: SDB and DWARF1327005
Node: VMS Debug1330997
Node: Floating Point1331567
Node: Mode Switching1336390
Node: Target Attributes1340316
Node: MIPS Coprocessors1345058
Node: PCH Target1346632
Node: C++ ABI1348153
Node: Misc1352772
Ref: TARGET_SHIFT_TRUNCATION_MASK1360142
Node: Host Config1399356
Node: Host Common1400416
Node: Filesystem1402795
Node: Host Misc1406910
Node: Fragments1409049
Node: Target Fragment1410244
Node: Host Fragment1415910
Node: Collect21417352
Node: Header Dirs1419895
Node: Type Information1421318
Node: GTY Options1423506
Node: GGC Roots1434174
Node: Files1434894
Node: Funding1437254
Node: GNU Project1439750
Node: Copying1440399
Node: GNU Free Documentation License1477930
Node: Contributors1500339
Node: Option Index1536537
Node: Concept Index1537122

End Tag Table
                                                                                                                                                                                                                                                                                                                          This is libgomp.info, produced by makeinfo version 4.12 from
/usr/local/home/bellard/cpux86/rootdisk/buildroot-2011.02/output/toolchain/gcc-4.3.5/libgomp/libgomp.texi.

Copyright (C) 2006 Free Software Foundation, Inc.

   Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "GNU General Public License" and "Funding Free
Software", the Front-Cover texts being (a) (see below), and with the
Back-Cover Texts being (b) (see below).  A copy of the license is
included in the section entitled "GNU Free Documentation License".

   (a) The FSF's Front-Cover Text is:

   A GNU Manual

   (b) The FSF's Back-Cover Text is:

   You have freedom to copy and modify this GNU Manual, like GNU
software.  Copies published by the Free Software Foundation raise
funds for GNU development.

INFO-DIR-SECTION GNU Libraries
START-INFO-DIR-ENTRY
* libgomp: (libgomp).                    GNU OpenMP runtime library
END-INFO-DIR-ENTRY

   This manual documents the GNU implementation of the OpenMP API for
multi-platform shared-memory parallel programming in C/C++ and Fortran.

   Published by the Free Software Foundation 51 Franklin Street, Fifth
Floor Boston, MA 02110-1301 USA

   Copyright (C) 2006 Free Software Foundation, Inc.

   Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.1 or
any later version published by the Free Software Foundation; with the
Invariant Sections being "GNU General Public License" and "Funding Free
Software", the Front-Cover texts being (a) (see below), and with the
Back-Cover Texts being (b) (see below).  A copy of the license is
included in the section entitled "GNU Free Documentation License".

   (a) The FSF's Front-Cover Text is:

   A GNU Manual

   (b) The FSF's Back-Cover Text is:

   You have freedom to copy and modify this GNU Manual, like GNU
software.  Copies published by the Free Software Foundation raise
funds for GNU development.


File: libgomp.info,  Node: Top,  Next: Enabling OpenMP,  Up: (dir)

Introduction
************

This manual documents the usage of libgomp, the GNU implementation of
the OpenMP (http://www.openmp.org) Application Programming Interface
(API) for multi-platform shared-memory parallel programming in C/C++
and Fortran.

* Menu:

* Enabling OpenMP::            How to enable OpenMP for your applications.
* Runtime Library Routines::   The OpenMP runtime application programming
                               interface.
* Environment Variables::      Influencing runtime behavior with environment
                               variables.
* The libgomp ABI::            Notes on the external ABI presented by libgomp.
* Reporting Bugs::             How to report bugs in GNU OpenMP.
* Copying::                    GNU general public license says
                               how you can copy and share libgomp.
* GNU Free Documentation License::
                               How you can copy and share this manual.
* Funding::                    How to help assure continued work for free
                               software.
* Index::                      Index of this documentation.


File: libgomp.info,  Node: Enabling OpenMP,  Next: Runtime Library Routines,  Prev: Top,  Up: Top

1 Enabling OpenMP
*****************

To activate the OpenMP extensions for C/C++ and Fortran, the
compile-time flag `-fopenmp' must be specified. This enables the OpenMP
directive `#pragma omp' in C/C++ and `!$omp' directives in free form,
`c$omp', `*$omp' and `!$omp' directives in fixed form, `!$' conditional
compilation sentinels in free form and `c$', `*$' and `!$' sentinels in
fixed form, for Fortran. The flag also arranges for automatic linking
of the OpenMP runtime library (*note Runtime Library Routines::).

   A complete description of all OpenMP directives accepted may be
found in the OpenMP Application Program Interface
(http://www.openmp.org) manual, version 2.5.


File: libgomp.info,  Node: Runtime Library Routines,  Next: Environment Variables,  Prev: Enabling OpenMP,  Up: Top

2 Runtime Library Routines
**************************

The runtime routines described here are defined by section 3 of the
OpenMP specifications in version 2.5.

   Control threads, processors and the parallel environment.

* Menu:

* omp_get_dynamic::          Dynamic teams setting
* omp_get_max_threads::      Maximum number of threads
* omp_get_nested::           Nested parallel regions
* omp_get_num_procs::        Number of processors online
* omp_get_num_threads::      Size of the active team
* omp_get_thread_num::       Current thread ID
* omp_in_parallel::          Whether a parallel region is active
* omp_set_dynamic::          Enable/disable dynamic teams
* omp_set_nested::           Enable/disable nested parallel regions
* omp_set_num_threads::      Set upper team size limit

   Initialize, set, test, unset and destroy simple and nested locks.

* Menu:

* omp_init_lock::            Initialize simple lock
* omp_set_lock::             Wait for and set simple lock
* omp_test_lock::            Test and set simple lock if available
* omp_unset_lock::           Unset simple lock
* omp_destroy_lock::         Destroy simple lock
* omp_init_nest_lock::       Initialize nested lock
* omp_set_nest_lock::        Wait for and set simple lock
* omp_test_nest_lock::       Test and set nested lock if available
* omp_unset_nest_lock::      Unset nested lock
* omp_destroy_nest_lock::    Destroy nested lock

   Portable, thread-based, wall clock timer.

* Menu:

* omp_get_wtick::            Get timer precision.
* omp_get_wtime::            Elapsed wall clock time.


File: libgomp.info,  Node: omp_get_dynamic,  Next: omp_get_max_threads,  Up: Runtime Library Routines

2.1 `omp_get_dynamic' - Dynamic teams setting
=============================================

_Description_:
     This function returns `true' if enabled, `false' otherwise.  Here,
     `true' and `false' represent their language-specific counterparts.

     The dynamic team setting may be initialized at startup by the
     `OMP_DYNAMIC' environment variable or at runtime using
     `omp_set_dynamic'. If undefined, dynamic adjustment is disabled by
     default.

_C/C++_:
     _Prototype_:  `int omp_get_dynamic();'

_Fortran_:
     _Interface_:  `logical function omp_get_dynamic()'

_See also_:
     *note omp_set_dynamic::, *note OMP_DYNAMIC::

_Reference_:
     OpenMP specifications v2.5 (http://www.openmp.org/), section 3.2.8.


File: libgomp.info,  Node: omp_get_max_threads,  Next: omp_get_nested,  Prev: omp_get_dynamic,  Up: Runtime Library Routines

2.2 `omp_get_max_threads' - Maximum number of threads
=====================================================

_Description_:
     Return the maximum number of threads used for parallel regions
     that do not use the clause `num_threads'.

_C/C++_:
     _Prototype_:  `int omp_get_max_threads();'

_Fortran_:
     _Interface_:  `integer function omp_get_max_threads()'

_See also_:
     *note omp_set_num_threads::, *note omp_set_dynamic::

_Reference_:
     OpenMP specifications v2.5 (http://www.openmp.org/), section 3.2.3.


File: libgomp.info,  Node: omp_get_nested,  Next: omp_get_num_procs,  Prev: omp_get_max_threads,  Up: Runtime Library Routines

2.3 `omp_get_nested' - Nested parallel regions
==============================================

_Description_:
     This function returns `true' if nested parallel regions are
     enabled, `false' otherwise. Here, `true' and `false' represent
     their language-specific counterparts.

     Nested parallel regions may be initialized at startup by the
     `OMP_NESTED' environment variable or at runtime using
     `omp_set_nested'. If undefined, nested parallel regions are
     disabled by default.

_C/C++_:
     _Prototype_:  `int omp_get_nested();'

_Fortran_:
     _Interface_:  `integer function omp_get_nested()'

_See also_:
     *note omp_set_nested::, *note OMP_NESTED::

_Reference_:
     OpenMP specifications v2.5 (http://www.openmp.org/), section
     3.2.10.


File: libgomp.info,  Node: omp_get_num_procs,  Next: omp_get_num_threads,  Prev: omp_get_nested,  Up: Runtime Library Routines

2.4 `omp_get_num_procs' - Number of processors online
=====================================================

_Description_:
     Returns the number of processors online.

_C/C++_:
     _Prototype_:  `int omp_get_num_procs();'

_Fortran_:
     _Interface_:  `integer function omp_get_num_procs()'

_Reference_:
     OpenMP specifications v2.5 (http://www.openmp.org/), section 3.2.5.


File: libgomp.info,  Node: omp_get_num_threads,  Next: omp_get_thread_num,  Prev: omp_get_num_procs,  Up: Runtime Library Routines

2.5 `omp_get_num_threads' - Size of the active team
===================================================

_Description_:
     The number of threads in the current team. In a sequential section
     of the program `omp_get_num_threads' returns 1.

     The default team size may be initialized at startup by the
     `OMP_NUM_THREADS' environment variable. At runtime, the size of
     the current team may be set either by the `NUM_THREADS' clause or
     by `omp_set_num_threads'. If none of the above were used to define
     a specific value and `OMP_DYNAMIC' is disabled, one thread per CPU
     online is used.

_C/C++_:
     _Prototype_:  `int omp_get_num_threads();'

_Fortran_:
     _Interface_:  `integer function omp_get_num_threads()'

_See also_:
     *note omp_get_max_threads::, *note omp_set_num_threads::, *note
     OMP_NUM_THREADS::

_Reference_:
     OpenMP specifications v2.5 (http://www.openmp.org/), section 3.2.2.


File: libgomp.info,  Node: omp_get_thread_num,  Next: omp_in_parallel,  Prev: omp_get_num_threads,  Up: Runtime Library Routines

2.6 `omp_get_thread_num' - Current thread ID
============================================

_Description_:
     Unique thread identification number. In a sequential parts of the
     program, `omp_get_thread_num' always returns 0. In parallel
     regions the return value varies from 0 to `o