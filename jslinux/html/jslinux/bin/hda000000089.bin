vailable at `_mp_d',
     and secondly when `mpf_set_prec_raw' lowers `_mp_prec' it leaves
     `_mp_size' unchanged and so the size can be arbitrarily bigger than
     `_mp_prec'.

Rounding
     All rounding is done on limb boundaries.  Calculating `_mp_prec'
     limbs with the high non-zero will ensure the application requested
     minimum precision is obtained.

     The use of simple "trunc" rounding towards zero is efficient,
     since there's no need to examine extra limbs and increment or
     decrement.

Bit Shifts
     Since the exponent is in limbs, there are no bit shifts in basic
     operations like `mpf_add' and `mpf_mul'.  When differing exponents
     are encountered all that's needed is to adjust pointers to line up
     the relevant limbs.

     Of course `mpf_mul_2exp' and `mpf_div_2exp' will require bit
     shifts, but the choice is between an exponent in limbs which
     requires shifts there, or one in bits which requires them almost
     everywhere else.

Use of `_mp_prec+1' Limbs
     The extra limb on `_mp_d' (`_mp_prec+1' rather than just
     `_mp_prec') helps when an `mpf' routine might get a carry from its
     operation.  `mpf_add' for instance will do an `mpn_add' of
     `_mp_prec' limbs.  If there's no carry then that's the result, but
     if there is a carry then it's stored in the extra limb of space and
     `_mp_size' becomes `_mp_prec+1'.

     Whenever `_mp_prec+1' limbs are held in a variable, the low limb
     is not needed for the intended precision, only the `_mp_prec' high
     limbs.  But zeroing it out or moving the rest down is unnecessary.
     Subsequent routines reading the value will simply take the high
     limbs they need, and this will be `_mp_prec' if their target has
     that same precision.  This is no more than a pointer adjustment,
     and must be checked anyway since the destination precision can be
     different from the sources.

     Copy functions like `mpf_set' will retain a full `_mp_prec+1' limbs
     if available.  This ensures that a variable which has `_mp_size'
     equal to `_mp_prec+1' will get its full exact value copied.
     Strictly speaking this is unnecessary since only `_mp_prec' limbs
     are needed for the application's requested precision, but it's
     considered that an `mpf_set' from one variable into another of the
     same precision ought to produce an exact copy.

Application Precisions
     `__GMPF_BITS_TO_PREC' converts an application requested precision
     to an `_mp_prec'.  The value in bits is rounded up to a whole limb
     then an extra limb is added since the most significant limb of
     `_mp_d' is only non-zero and therefore might contain only one bit.

     `__GMPF_PREC_TO_BITS' does the reverse conversion, and removes the
     extra limb from `_mp_prec' before converting to bits.  The net
     effect of reading back with `mpf_get_prec' is simply the precision
     rounded up to a multiple of `mp_bits_per_limb'.

     Note that the extra limb added here for the high only being
     non-zero is in addition to the extra limb allocated to `_mp_d'.
     For example with a 32-bit limb, an application request for 250
     bits will be rounded up to 8 limbs, then an extra added for the
     high being only non-zero, giving an `_mp_prec' of 9.  `_mp_d' then
     gets 10 limbs allocated.  Reading back with `mpf_get_prec' will
     take `_mp_prec' subtract 1 limb and multiply by 32, giving 256
     bits.

     Strictly speaking, the fact the high limb has at least one bit
     means that a float with, say, 3 limbs of 32-bits each will be
     holding at least 65 bits, but for the purposes of `mpf_t' it's
     considered simply to be 64 bits, a nice multiple of the limb size.


File: gmp.info,  Node: Raw Output Internals,  Next: C++ Interface Internals,  Prev: Float Internals,  Up: Internals

17.4 Raw Output Internals
=========================

`mpz_out_raw' uses the following format.

     +------+------------------------+
     | size |       data bytes       |
     +------+------------------------+

   The size is 4 bytes written most significant byte first, being the
number of subsequent data bytes, or the twos complement negative of
that when a negative integer is represented.  The data bytes are the
absolute value of the integer, written most significant byte first.

   The most significant data byte is always non-zero, so the output is
the same on all systems, irrespective of limb size.

   In GMP 1, leading zero bytes were written to pad the data bytes to a
multiple of the limb size.  `mpz_inp_raw' will still accept this, for
compatibility.

   The use of "big endian" for both the size and data fields is
deliberate, it makes the data easy to read in a hex dump of a file.
Unfortunately it also means that the limb data must be reversed when
reading or writing, so neither a big endian nor little endian system
can just read and write `_mp_d'.


File: gmp.info,  Node: C++ Interface Internals,  Prev: Raw Output Internals,  Up: Internals

17.5 C++ Interface Internals
============================

A system of expression templates is used to ensure something like
`a=b+c' turns into a simple call to `mpz_add' etc.  For `mpf_class' the
scheme also ensures the precision of the final destination is used for
any temporaries within a statement like `f=w*x+y*z'.  These are
important features which a naive implementation cannot provide.

   A simplified description of the scheme follows.  The true scheme is
complicated by the fact that expressions have different return types.
For detailed information, refer to the source code.

   To perform an operation, say, addition, we first define a "function
object" evaluating it,

     struct __gmp_binary_plus
     {
       static void eval(mpf_t f, mpf_t g, mpf_t h) { mpf_add(f, g, h); }
     };

And an "additive expression" object,

     __gmp_expr<__gmp_binary_expr<mpf_class, mpf_class, __gmp_binary_plus> >
     operator+(const mpf_class &f, const mpf_class &g)
     {
       return __gmp_expr
         <__gmp_binary_expr<mpf_class, mpf_class, __gmp_binary_plus> >(f, g);
     }

   The seemingly redundant `__gmp_expr<__gmp_binary_expr<...>>' is used
to encapsulate any possible kind of expression into a single template
type.  In fact even `mpf_class' etc are `typedef' specializations of
`__gmp_expr'.

   Next we define assignment of `__gmp_expr' to `mpf_class'.

     template <class T>
     mpf_class & mpf_class::operator=(const __gmp_expr<T> &expr)
     {
       expr.eval(this->get_mpf_t(), this->precision());
       return *this;
     }

     template <class Op>
     void __gmp_expr<__gmp_binary_expr<mpf_class, mpf_class, Op> >::eval
     (mpf_t f, mp_bitcnt_t precision)
     {
       Op::eval(f, expr.val1.get_mpf_t(), expr.val2.get_mpf_t());
     }

   where `expr.val1' and `expr.val2' are references to the expression's
operands (here `expr' is the `__gmp_binary_expr' stored within the
`__gmp_expr').

   This way, the expression is actually evaluated only at the time of
assignment, when the required precision (that of `f') is known.
Furthermore the target `mpf_t' is now available, thus we can call
`mpf_add' directly with `f' as the output argument.

   Compound expressions are handled by defining operators taking
subexpressions as their arguments, like this:

     template <class T, class U>
     __gmp_expr
     <__gmp_binary_expr<__gmp_expr<T>, __gmp_expr<U>, __gmp_binary_plus> >
     operator+(const __gmp_expr<T> &expr1, const __gmp_expr<U> &expr2)
     {
       return __gmp_expr
         <__gmp_binary_expr<__gmp_expr<T>, __gmp_expr<U>, __gmp_binary_plus> >
         (expr1, expr2);
     }

   And the corresponding specializations of `__gmp_expr::eval':

     template <class T, class U, class Op>
     void __gmp_expr
     <__gmp_binary_expr<__gmp_expr<T>, __gmp_expr<U>, Op> >::eval
     (mpf_t f, mp_bitcnt_t precision)
     {
       // declare two temporaries
       mpf_class temp1(expr.val1, precision), temp2(expr.val2, precision);
       Op::eval(f, temp1.get_mpf_t(), temp2.get_mpf_t());
     }

   The expression is thus recursively evaluated to any level of
complexity and all subexpressions are evaluated to the precision of `f'.


File: gmp.info,  Node: Contributors,  Next: References,  Prev: Internals,  Up: Top

Appendix A Contributors
***********************

Torbjo"rn Granlund wrote the original GMP library and is still the main
developer.  Code not explicitly attributed to others, was contributed by
Torbjo"rn.  Several other individuals and organizations have contributed
GMP.  Here is a list in chronological order on first contribution:

   Gunnar Sjo"din and Hans Riesel helped with mathematical problems in
early versions of the library.

   Richard Stallman helped with the interface design and revised the
first version of this manual.

   Brian Beuning and Doug Lea helped with testing of early versions of
the library and made creative suggestions.

   John Amanatides of York University in Canada contributed the function
`mpz_probab_prime_p'.

   Paul Zimmermann wrote the REDC-based mpz_powm code, the
Scho"nhage-Strassen FFT multiply code, and the Karatsuba square root
code.  He also improved the Toom3 code for GMP 4.2.  Paul sparked the
development of GMP 2, with his comparisons between bignum packages.
The ECMNET project Paul is organizing was a driving force behind many
of the optimizations in GMP 3.  Paul also wrote the new GMP 4.3 nth
root code (with Torbjo"rn).

   Ken Weber (Kent State University, Universidade Federal do Rio Grande
do Sul) contributed now defunct versions of `mpz_gcd', `mpz_divexact',
`mpn_gcd', and `mpn_bdivmod', partially supported by CNPq (Brazil)
grant 301314194-2.

   Per Bothner of Cygnus Support helped to set up GMP to use Cygnus'
configure.  He has also made valuable suggestions and tested numerous
intermediary releases.

   Joachim Hollman was involved in the design of the `mpf' interface,
and in the `mpz' design revisions for version 2.

   Bennet Yee contributed the initial versions of `mpz_jacobi' and
`mpz_legendre'.

   Andreas Schwab contributed the files `mpn/m68k/lshift.S' and
`mpn/m68k/rshift.S' (now in `.asm' form).

   Robert Harley of Inria, France and David Seal of ARM, England,
suggested clever improvements for population count.  Robert also wrote
highly optimized Karatsuba and 3-way Toom multiplication functions for
GMP 3, and contributed the ARM assembly code.

   Torsten Ekedahl of the Mathematical department of Stockholm
University provided significant inspiration during several phases of
the GMP development.  His mathematical expertise helped improve several
algorithms.

   Linus Nordberg wrote the new configure system based on autoconf and
implemented the new random functions.

   Kevin Ryde worked on a large number of things: optimized x86 code,
m4 asm macros, parameter tuning, speed measuring, the configure system,
function inlining, divisibility tests, bit scanning, Jacobi symbols,
Fibonacci and Lucas number functions, printf and scanf functions, perl
interface, demo expression parser, the algorithms chapter in the
manual, `gmpasm-mode.el', and various miscellaneous improvements
elsewhere.

   Kent Boortz made the Mac OS 9 port.

   Steve Root helped write the optimized alpha 21264 assembly code.

   Gerardo Ballabio wrote the `gmpxx.h' C++ class interface and the C++
`istream' input routines.

   Jason Moxham rewrote `mpz_fac_ui'.

   Pedro Gimeno implemented the Mersenne Twister and made other random
number improvements.

   Niels Mo"ller wrote the sub-quadratic GCD and extended GCD code, the
quadratic Hensel division code, and (with Torbjo"rn) the new divide and
conquer division code for GMP 4.3.  Niels also helped implement the new
Toom multiply code for GMP 4.3 and implemented helper functions to
simplify Toom evaluations for GMP 5.0.  He wrote the original version
of mpn_mulmod_bnm1.

   Alberto Zanoni and Marco Bodrato suggested the unbalanced multiply
strategy, and found the optimal strategies for evaluation and
interpolation in Toom multiplication.

   Marco Bodrato helped implement the new Toom multiply code for GMP
4.3 and implemented most of the new Toom multiply and squaring code for
5.0.  He is the main author of the current mpn_mulmod_bnm1 and
mpn_mullo_n.  Marco also wrote the functions mpn_invert and
mpn_invertappr.

   David Harvey suggested the internal function `mpn_bdiv_dbm1',
implementing division relevant to Toom multiplication.  He also worked
on fast assembly sequences, in particular on a fast AMD64
`mpn_mul_basecase'.

   Martin Boij wrote `mpn_perfect_power_p'.

   (This list is chronological, not ordered after significance.  If you
have contributed to GMP but are not listed above, please tell
<gmp-devel@gmplib.org> about the omission!)

   The development of floating point functions of GNU MP 2, were
supported in part by the ESPRIT-BRA (Basic Research Activities) 6846
project POSSO (POlynomial System SOlving).

   The development of GMP 2, 3, and 4 was supported in part by the IDA
Center for Computing Sciences.

   Thanks go to Hans Thorsen for donating an SGI system for the GMP
test system environment.


File: gmp.info,  Node: References,  Next: GNU Free Documentation License,  Prev: Contributors,  Up: Top

Appendix B References
*********************

B.1 Books
=========

   * Jonathan M. Borwein and Peter B. Borwein, "Pi and the AGM: A Study
     in Analytic Number Theory and Computational Complexity", Wiley,
     1998.

   * Richard Crandall and Carl Pomerance, "Prime Numbers: A
     Computational Perspective", 2nd edition, Springer-Verlag, 2005.
     `http://math.dartmouth.edu/~carlp/'

   * Henri Cohen, "A Course in Computational Algebraic Number Theory",
     Graduate Texts in Mathematics number 138, Springer-Verlag, 1993.
     `http://www.math.u-bordeaux.fr/~cohen/'

   * Donald E. Knuth, "The Art of Computer Programming", volume 2,
     "Seminumerical Algorithms", 3rd edition, Addison-Wesley, 1998.
     `http://www-cs-faculty.stanford.edu/~knuth/taocp.html'

   * John D. Lipson, "Elements of Algebra and Algebraic Computing", The
     Benjamin Cummings Publishing Company Inc, 1981.

   * Alfred J. Menezes, Paul C. van Oorschot and Scott A. Vanstone,
     "Handbook of Applied Cryptography",
     `http://www.cacr.math.uwaterloo.ca/hac/'

   * Richard M. Stallman and the GCC Developer Community, "Using the
     GNU Compiler Collection", Free Software Foundation, 2008,
     available online `http://gcc.gnu.org/onlinedocs/', and in the GCC
     package `ftp://ftp.gnu.org/gnu/gcc/'

B.2 Papers
==========

   * Yves Bertot, Nicolas Magaud and Paul Zimmermann, "A Proof of GMP
     Square Root", Journal of Automated Reasoning, volume 29, 2002, pp.
     225-252.  Also available online as INRIA Research Report 4475,
     June 2001, `http://www.inria.fr/rrrt/rr-4475.html'

   * Christoph Burnikel and Joachim Ziegler, "Fast Recursive Division",
     Max-Planck-Institut fuer Informatik Research Report MPI-I-98-1-022,
     `http://data.mpi-sb.mpg.de/internet/reports.nsf/NumberView/1998-1-022'

   * Torbjo"rn Granlund and Peter L. Montgomery, "Division by Invariant
     Integers using Multiplication", in Proceedings of the SIGPLAN
     PLDI'94 Conference, June 1994.  Also available
     `ftp://ftp.cwi.nl/pub/pmontgom/divcnst.psa4.gz' (and .psl.gz).

   * Niels Mo"ller and Torbjo"rn Granlund, "Improved division by
     invariant integers", to appear.

   * Torbjo"rn Granlund and Niels Mo"ller, "Division of integers large
     and small", to appear.

   * Tudor Jebelean, "An algorithm for exact division", Journal of
     Symbolic Computation, volume 15, 1993, pp. 169-180.  Research
     report version available
     `ftp://ftp.risc.uni-linz.ac.at/pub/techreports/1992/92-35.ps.gz'

   * Tudor Jebelean, "Exact Division with Karatsuba Complexity -
     Extended Abstract", RISC-Linz technical report 96-31,
     `ftp://ftp.risc.uni-linz.ac.at/pub/techreports/1996/96-31.ps.gz'

   * Tudor Jebelean, "Practical Integer Division with Karatsuba
     Complexity", ISSAC 97, pp. 339-341.  Technical report available
     `ftp://ftp.risc.uni-linz.ac.at/pub/techreports/1996/96-29.ps.gz'

   * Tudor Jebelean, "A Generalization of the Binary GCD Algorithm",
     ISSAC 93, pp. 111-116.  Technical report version available
     `ftp://ftp.risc.uni-linz.ac.at/pub/techreports/1993/93-01.ps.gz'

   * Tudor Jebelean, "A Double-Digit Lehmer-Euclid Algorithm for
     Finding the GCD of Long Integers", Journal of Symbolic
     Computation, volume 19, 1995, pp. 145-157.  Technical report
     version also available
     `ftp://ftp.risc.uni-linz.ac.at/pub/techreports/1992/92-69.ps.gz'

   * Werner Krandick and Tudor Jebelean, "Bidirectional Exact Integer
     Division", Journal of Symbolic Computation, volume 21, 1996, pp.
     441-455.  Early technical report version also available
     `ftp://ftp.risc.uni-linz.ac.at/pub/techreports/1994/94-50.ps.gz'

   * Makoto Matsumoto and Takuji Nishimura, "Mersenne Twister: A
     623-dimensionally equidistributed uniform pseudorandom number
     generator", ACM Transactions on Modelling and Computer Simulation,
     volume 8, January 1998, pp. 3-30.  Available online
     `http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/ARTICLES/mt.ps.gz'
     (or .pdf)

   * R. Moenck and A. Borodin, "Fast Modular Transforms via Division",
     Proceedings of the 13th Annual IEEE Symposium on Switching and
     Automata Theory, October 1972, pp. 90-96.  Reprinted as "Fast
     Modular Transforms", Journal of Computer and System Sciences,
     volume 8, number 3, June 1974, pp. 366-386.

   * Niels Mo"ller, "On Scho"nhage's algorithm and subquadratic integer
     GCD   computation", in Mathematics of Computation, volume 77,
     January 2008, pp.    589-607.

   * Peter L. Montgomery, "Modular Multiplication Without Trial
     Division", in Mathematics of Computation, volume 44, number 170,
     April 1985.

   * Arnold Scho"nhage and Volker Strassen, "Schnelle Multiplikation
     grosser Zahlen", Computing 7, 1971, pp. 281-292.

   * Kenneth Weber, "The accelerated integer GCD algorithm", ACM
     Transactions on Mathematical Software, volume 21, number 1, March
     1995, pp. 111-122.

   * Paul Zimmermann, "Karatsuba Square Root", INRIA Research Report
     3805, November 1999, `http://www.inria.fr/rrrt/rr-3805.html'

   * Paul Zimmermann, "A Proof of GMP Fast Division and Square Root
     Implementations",
     `http://www.loria.fr/~zimmerma/papers/proof-div-sqrt.ps.gz'

   * Dan Zuras, "On Squaring and Multiplying Large Integers", ARITH-11:
     IEEE Symposium on Computer Arithmetic, 1993, pp. 260 to 271.
     Reprinted as "More on Multiplying and Squaring Large Integers",
     IEEE Transactions on Computers, volume 43, number 8, August 1994,
     pp. 899-908.


File: gmp.info,  Node: GNU Free Documentation License,  Next: Concept Index,  Prev: References,  Up: Top

Appendix C GNU Free Documentation License
*****************************************

                     Version 1.3, 3 November 2008

     Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     `http://fsf.org/'

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.
     We recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it
     can be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You
     accept the license if you copy, modify or distribute the work in a
     way requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in
     the notice that says that the Document is released under this
     License.  If a section does not fit the above definition of
     Secondary then it is not allowed to be designated as Invariant.
     The Document may contain zero Invariant Sections.  If the Document
     does not identify any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images
     composed of pixels) generic paint programs or (for drawings) some
     widely available drawing editor, and that is suitable for input to
     text formatters or for automatic translation to a variety of
     formats suitable for input to text formatters.  A copy made in an
     otherwise Transparent file format whose markup, or absence of
     markup, has been arranged to thwart or discourage subsequent
     modification by readers is not Transparent.  An image format is
     not Transparent if used for any substantial amount of text.  A
     copy that is not "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and
     standard-conforming simple HTML, PostScript or PDF designed for
     human modification.  Examples of transparent image formats include
     PNG, XCF and JPG.  Opaque formats include proprietary formats that
     can be read and edited only by proprietary word processors, SGML or
     XML for which the DTD and/or processing tools are not generally
     available, and the machine-generated HTML, PostScript or PDF
     produced by some word processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     The "publisher" means any person or entity that distributes copies
     of the Document to the public.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow
     the conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the
     title equally prominent and visible.  You may add other material
     on the covers in addition.  Copying with changes limited to the
     covers, as long as they preserve the title of the Document and
     satisfy these conditions, can be treated as verbatim copying in
     other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a
     machine-readable Transparent copy along with each Opaque copy, or
     state in or with each Opaque copy a computer-network location from
     which the general network-using public has access to download
     using public-standard network protocols a complete Transparent
     copy of the Document, free of added material.  If you use the
     latter option, you must take reasonably prudent steps, when you
     begin distribution of Opaque copies in quantity, to ensure that
     this Transparent copy will remain thus accessible at the stated
     location until at least one year after the last time you
     distribute an Opaque copy (directly or through your agents or
     retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of
     copies, to give them a chance to provide you with an updated
     version of the Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with
     the Modified Version filling the role of the Document, thus
     licensing distribution and modification of the Modified Version to
     whoever possesses a copy of it.  In addition, you must do these
     things in the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of
          previous versions (which should, if there were any, be listed
          in the History section of the Document).  You may use the
          same title as a previous version if the original publisher of
          that version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on
          the Title Page.  If there is no section Entitled "History" in
          the Document, create one stating the title, year, authors,
          and publisher of the Document as given on its Title Page,
          then add an item describing the Modified Version as stated in
          the previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in
          the "History" section.  You may omit a network location for a
          work that was published at least four years before the
          Document itself, or if the original publisher of the version
          it refers to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the
          section all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document,
          unaltered in their text and in their titles.  Section numbers
          or the equivalent are not considered part of the section
          titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option
     designate some or all of these sections as invariant.  To do this,
     add their titles to the list of Invariant Sections in the Modified
     Version's license notice.  These titles must be distinct from any
     other section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end
     of the list of Cover Texts in the Modified Version.  Only one
     passage of Front-Cover Text and one of Back-Cover Text may be
     added by (or through arrangements made by) any one entity.  If the
     Document already includes a cover text for the same cover,
     previously added by you or by arrangement made by the same entity
     you are acting on behalf of, you may not add another; but you may
     replace the old one, on explicit permission from the previous
     publisher that added the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination
     all of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the
     documents in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow
     this License in all other respects regarding verbatim copying of
     that document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of
     a storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly
     and finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from
     you under this License.  If your rights have been terminated and
     not permanently reinstated, receipt of a copy of some or all of
     the same material does not give you any rights to use it.

 10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     `http://www.gnu.org/copyleft/'.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If
     the Document does not specify a version number of this License,
     you may choose any version ever published (not as a draft) by the
     Free Software Foundation.  If the Document specifies that a proxy
     can decide which future versions of this License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

 11. RELICENSING

     "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A "Massive Multiauthor Collaboration" (or "MMC") contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     "CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     "Incorporate" means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is "eligible for relicensing" if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.


ADDENDUM: How to use this License for your documents
====================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

   If you have Invariant Sections, Front-Cover Texts and Back-Cover
Texts, replace the "with...Texts." line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

   If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

   If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License, to
permit their use in free software.


File: gmp.info,  Node: Concept Index,  Next: Function Index,  Prev: GNU Free Documentation License,  Up: Top

Concept Index
*************

 [index ]
* Menu:

* #include:                              Headers and Libraries.
                                                              (line   6)
* --build:                               Build Options.       (line  52)
* --disable-fft:                         Build Options.       (line 317)
* --disable-shared:                      Build Options.       (line  45)
* --disable-static:                      Build Options.       (line  45)
* --enable-alloca:                       Build Options.       (line 278)
* --enable-assert:                       Build Options.       (line 327)
* --enable-cxx:                          Build Options.       (line 230)
* --enable-fat:                          Build Options.       (line 164)
* --enable-mpbsd:                        Build Options.       (line 322)
* --enable-profiling <1>:                Profiling.           (line   6)
* --enable-profiling:                    Build Options.       (line 331)
* --exec-prefix:                         Build Options.       (line  32)
* --host:                                Build Options.       (line  66)
* --prefix:                              Build Options.       (line  32)
* -finstrument-functions:                Profiling.           (line  66)
* 2exp functions:                        Efficiency.          (line  43)
* 68000:                                 Notes for Particular Systems.
                                                              (line  80)
* 80x86:                                 Notes for Particular Systems.
                                                              (line 126)
* ABI <1>:                               Build Options.       (line 171)
* ABI:                                   ABI and ISA.         (line   6)
* About this manual:                     Introduction to GMP. (line  58)
* AC_CHECK_LIB:                          Autoconf.            (line  11)
* AIX <1>:                               ABI and ISA.         (line 184)
* AIX <2>:                               Notes for Particular Systems.
                                                              (line   7)
* AIX:                                   ABI and ISA.         (line 169)
* Algorithms:                            Algorithms.          (line   6)
* alloca:                                Build Options.       (line 278)
* Allocation of memory:                  Custom Allocation.   (line   6)
* AMD64:                                 ABI and ISA.         (line  44)
* Anonymous FTP of latest version:       Introduction to GMP. (line  38)
* Application Binary Interface:          ABI and ISA.         (line   6)
* Arithmetic functions <1>:              Float Arithmetic.    (line   6)
* Arithmetic functions <2>:              Integer Arithmetic.  (line   6)
* Arithmetic functions:                  Rational Arithmetic. (line   6)
* ARM:                                   Notes for Particular Systems.
                                                              (line  20)
* Assembly cache handling:               Assembly Cache Handling.
                                                              (line   6)
* Assembly carry propagation:            Assembly Carry Propagation.
                                                              (line   6)
* Assembly code organisation:            Assembly Code Organisation.
                                                              (line   6)
* Assembly coding:                       Assembly Coding.     (line   6)
* Assembly floating Point:               Assembly Floating Point.
                                                              (line   6)
* Assembly loop unrolling:               Assembly Loop Unrolling.
                                                              (line   6)
* Assembly SIMD:                         Assembly SIMD Instructions.
                                                              (line   6)
* Assembly software pipelining:          Assembly Software Pipelining.
                                                              (line   6)
* Assembly writing guide:                Assembly Writing Guide.
                                                              (line   6)
* Assertion checking <1>:                Debugging.           (line  79)
* Assertion checking:                    Build Options.       (line 327)
* Assignment functions <1>:              Assigning Floats.    (line   6)
* Assignment functions <2>:              Initializing Rationals.
                                                              (line   6)
* Assignment functions <3>:              Simultaneous Integer Init & Assign.
                                                              (line   6)
* Assignment functions <4>:              Simultaneous Float Init & Assign.
                                                              (line   6)
* Assignment functions:                  Assigning Integers.  (line   6)
* Autoconf:                              Autoconf.            (line   6)
* Basics:                                GMP Basics.          (line   6)
* Berkeley MP compatible functions <1>:  Build Options.       (line 322)
* Berkeley MP compatible functions:      BSD Compatible Functions.
                                                              (line   6)
* Binomial coefficient algorithm:        Binomial Coefficients Algorithm.
                                                              (line   6)
* Binomial coefficient functions:        Number Theoretic Functions.
                                                              (line 100)
* Binutils strip:                        Known Build Problems.
                                                              (line  28)
* Bit manipulation functions:            Integer Logic and Bit Fiddling.
                                                              (line   6)
* Bit scanning functions:                Integer Logic and Bit Fiddling.
                                                              (line  38)
* Bit shift left:                        Integer Arithmetic.  (line  35)
* Bit shift right:                       Integer Division.    (line  53)
* Bits per limb:                         Useful Macros and Constants.
                                                              (line   7)
* BSD MP compatible functions <1>:       Build Options.       (line 322)
* BSD MP compatible functions:           BSD Compatible Functions.
                                                              (line   6)
* Bug reporting:                         Reporting Bugs.      (line   6)
* Build directory:                       Build Options.       (line  19)
* Build notes for binary packaging:      Notes for Package Builds.
                                                              (line   6)
* Build notes for particular systems:    Notes for Particular Systems.
                                                              (line   6)
* Build options:                         Build Options.       (line   6)
* Build problems known:                  Known Build Problems.
                                                              (line   6)
* Build system:                          Build Options.       (line  52)
* Building GMP:                          Installing GMP.      (line   6)
* Bus error:                             Debugging.           (line   7)
* C compiler:                            Build Options.       (line 182)
* C++ compiler:                          Build Options.       (line 254)
* C++ interface:                         C++ Class Interface. (line   6)
* C++ interface internals:               C++ Interface Internals.
                                                              (line   6)
* C++ istream input:                     C++ Formatted Input. (line   6)
* C++ ostream output:                    C++ Formatted Output.
                                                              (line   6)
* C++ support:                           Build Options.       (line 230)
* CC:                                    Build Options.       (line 182)
* CC_FOR_BUILD:                          Build Options.       (line 217)
* CFLAGS:                                Build Options.       (line 182)
* Checker:                               Debugging.           (line 115)
* checkergcc:                            Debugging.           (line 122)
* Code organisation:                     Assembly Code Organisation.
                                                              (line   6)
* Compaq C++:                            Notes for Particular Systems.
                                                              (line  25)
* Comparison functions <1>:              Integer Comparisons. (line   6)
* Comparison functions <2>:              Comparing Rationals. (line   6)
* Comparison functions:                  Float Comparison.    (line   6)
* Compatibility with older versions:     Compatibility with older versions.
                                                              (line   6)
* Conditions for copying GNU MP:         Copying.             (line   6)
* Configuring GMP:                       Installing GMP.      (line   6)
* Congruence algorithm:                  Exact Remainder.     (line  29)
* Congruence functions:                  Integer Division.    (line 124)
* Constants:                             Useful Macros and Constants.
                                                              (line   6)
* Contributors:                          Contributors.        (line   6)
* Conventions for parameters:            Parameter Conventions.
                                                              (line   6)
* Conventions for variables:             Variable Conventions.
                                                              (line   6)
* Conversion functions <1>:              Converting Integers. (line   6)
* Conversion functions <2>:              Converting Floats.   (line   6)
* Conversion functions:                  Rational Conversions.
                                                              (line   6)
* Copying conditions:                    Copying.             (line   6)
* CPPFLAGS:                              Build Options.       (line 208)
* CPU types <1>:                         Introduction to GMP. (line  24)
* CPU types:                             Build Options.       (line 108)
* Cross compiling:                       Build Options.       (line  66)
* Custom allocation:                     Custom Allocation.   (line   6)
* CXX:                                   Build Options.       (line 254)
* CXXFLAGS:                              Build Options.       (line 254)
* Cygwin:                                Notes for Particular Systems.
                                                              (line  43)
* Darwin:                                Known Build Problems.
                                                              (line  51)
* Debugging:                             Debugging.           (line   6)
* Demonstration programs:                Demonstration Programs.
                                                              (line   6)
* Digits in an integer:                  Miscellaneous Integer Functions.
                                                              (line  23)
* Divisibility algorithm:                Exact Remainder.     (line  29)
* Divisibility functions:                Integer Division.    (line 124)
* Divisibility testing:                  Efficiency.          (line  91)
* Division algorithms:                   Division Algorithms. (line   6)
* Division functions <1>:                Rational Arithmetic. (line  22)
* Division functions <2>:                Integer Division.    (line   6)
* Division functions:                    Float Arithmetic.    (line  33)
* DJGPP <1>:                             Notes for Particular Systems.
                                                              (line  43)
* DJGPP:                                 Known Build Problems.
                                                              (line  18)
* DLLs:                                  Notes for Particular Systems.
                                                              (line  56)
* DocBook:                               Build Options.       (line 354)
* Documentation formats:                 Build Options.       (line 347)
* Documentation license:                 GNU Free Documentation License.
                                                              (line   6)
* DVI:                                   Build Options.       (line 350)
* Efficiency:                            Efficiency.          (line   6)
* Emacs:                                 Emacs.               (line   6)
* Exact division functions:              Integer Division.    (line 102)
* Exact remainder:                       Exact Remainder.     (line   6)
* Example programs:                      Demonstration Programs.
                                                              (line   6)
* Exec prefix:                           Build Options.       (line  32)
* Execution profiling <1>:               Profiling.           (line   6)
* Execution profiling:                   Build Options.       (line 331)
* Exponentiation functions <1>:          Integer Exponentiation.
                                                              (line   6)
* Exponentiation functions:              Float Arithmetic.    (line  41)
* Export:                                Integer Import and Export.
                                                              (line  45)
* Expression parsing demo:               Demonstration Programs.
                                                              (line  18)
* Extended GCD:                          Number Theoretic Functions.
                                                              (line  45)
* Factor removal functions:              Number Theoretic Functions.
                                                              (line  90)
* Factorial algorithm:                   Factorial Algorithm. (line   6)
* Factorial functions:                   Number Theoretic Functions.
                                                              (line  95)
* Factorization demo:                    Demonstration Programs.
                                                              (line  25)
* Fast Fourier Transform:                FFT Multiplication.  (line   6)
* Fat binary:                            Build Options.       (line 164)
* FFT multiplication <1>:                FFT Multiplication.  (line   6)
* FFT multiplication:                    Build Options.       (line 317)
* Fibonacci number algorithm:            Fibonacci Numbers Algorithm.
                                                              (line   6)
* Fibonacci sequence functions:          Number Theoretic Functions.
                                                              (line 108)
* Float arithmetic functions:            Float Arithmetic.    (line   6)
* Float assignment functions <1>:        Simultaneous Float Init & Assign.
                                                              (line   6)
* Float assignment functions:            Assigning Floats.    (line   6)
* Float comparison functions:            Float Comparison.    (line   6)
* Float conversion functions:            Converting Floats.   (line   6)
* Float functions:                       Floating-point Functions.
                                                              (line   6)
* Float initialization functions <1>:    Simultaneous Float Init & Assign.
                                                              (line   6)
* Float initialization functions:        Initializing Floats. (line   6)
* Float input and output functions:      I/O of Floats.       (line   6)
* Float internals:                       Float Internals.     (line   6)
* Float miscellaneous functions:         Miscellaneous Float Functions.
                                                              (line   6)
* Float random number functions:         Miscellaneous Float Functions.
                                                              (line  27)
* Float rounding functions:              Miscellaneous Float Functions.
                                                              (line   9)
* Float sign tests:                      Float Comparison.    (line  33)
* Floating point mode:                   Notes for Particular Systems.
                                                              (line  34)
* Floating-point functions:              Floating-point Functions.
                                                              (line   6)
* Floating-point number:                 Nomenclature and Types.
                                                              (line  21)
* fnccheck:                              Profiling.           (line  77)
* Formatted input:                       Formatted Input.     (line   6)
* Formatted output:                      Formatted Output.    (line   6)
* Free Documentation License:            GNU Free Documentation License.
                                                              (line   6)
* frexp <1>:                             Converting Floats.   (line  23)
* frexp:                                 Converting Integers. (line  42)
* FTP of latest version:                 Introduction to GMP. (line  38)
* Function classes:                      Function Classes.    (line   6)
* FunctionCheck:                         Profiling.           (line  77)
* GCC Checker:                           Debugging.           (line 115)
* GCD algorithms:                        Greatest Common Divisor Algorithms.
                                                              (line   6)
* GCD extended:                          Number Theoretic Functions.
                                                              (line  45)
* GCD functions:                         Number Theoretic Functions.
                                                              (line  30)
* GDB:                                   Debugging.           (line  58)
* Generic C:                             Build Options.       (line 153)
* GMP Perl module:                       Demonstration Programs.
                                                              (line  35)
* GMP version number:                    Useful Macros and Constants.
                                                              (line  12)
* gmp.h:                                 Headers and Libraries.
                                                              (line   6)
* gmpxx.h:                               C++ Interface General.
                                                              (line   8)
* GNU Debugger:                          Debugging.           (line  58)
* GNU Free Documentation License:        GNU Free Documentation License.
                                                              (line   6)
* GNU strip:                             Known Build Problems.
                                                              (line  28)
* gprof:                                 Profiling.           (line  41)
* Greatest common divisor algorithms:    Greatest Common Divisor Algorithms.
                                                              (line   6)
* Greatest common divisor functions:     Number Theoretic Functions.
                                                              (line  30)
* Hardware floating point mode:          Notes for Particular Systems.
                                                              (line  34)
* Headers:                               Headers and Libraries.
                                                              (line   6)
* Heap problems:                         Debugging.           (line  24)
* Home page:                             Introduction to GMP. (line  34)
* Host system:                           Build Options.       (line  66)
* HP-UX:                                 ABI and ISA.         (line 107)
* HPPA:                                  ABI and ISA.         (line  68)
* I/O functions <1>:                     I/O of Integers.     (line   6)
* I/O functions <2>:                     I/O of Rationals.    (line   6)
* I/O functions:                         I/O of Floats.       (line   6)
* i386:                                  Notes for Particular Systems.
                                                              (line 126)
* IA-64:                                 ABI and ISA.         (line 107)
* Import:                                Integer Import and Export.
                                                              (line  11)
* In-place operations:                   Efficiency.          (line  57)
* Include files:                         Headers and Libraries.
                                                              (line   6)
* info-lookup-symbol:                    Emacs.               (line   6)
* Initialization functions <1>:          Initializing Integers.
                                                              (line   6)
* Initialization functions <2>:          Initializing Rationals.
                                                              (line   6)
* Initialization functions <3>:          Random State Initialization.
                                          