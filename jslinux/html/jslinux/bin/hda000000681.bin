e-independent predicates:        Machine-Independent Predicates.
                                                             (line    6)
* machine_mode:                          Condition Code.     (line  157)
* macros, target description:            Target Macros.      (line    6)
* maddMN4 instruction pattern:           Standard Names.     (line  364)
* MAKE_DECL_ONE_ONLY:                    Label Output.       (line  218)
* make_safe_from:                        Expander Definitions.
                                                             (line  148)
* makefile fragment:                     Fragments.          (line    6)
* makefile targets:                      Makefile.           (line    6)
* mark_hook:                             GTY Options.        (line  170)
* marking roots:                         GGC Roots.          (line    6)
* MASK_RETURN_ADDR:                      Exception Region Output.
                                                             (line   35)
* match_dup <1>:                         define_peephole2.   (line   28)
* match_dup:                             RTL Template.       (line   73)
* match_dup and attributes:              Insn Lengths.       (line   16)
* match_op_dup:                          RTL Template.       (line  163)
* match_operand:                         RTL Template.       (line   16)
* match_operand and attributes:          Expressions.        (line   55)
* match_operator:                        RTL Template.       (line   95)
* match_par_dup:                         RTL Template.       (line  219)
* match_parallel:                        RTL Template.       (line  172)
* match_scratch <1>:                     define_peephole2.   (line   28)
* match_scratch:                         RTL Template.       (line   58)
* matching constraint:                   Simple Constraints. (line  130)
* matching operands:                     Output Template.    (line   49)
* math library:                          Soft float library routines.
                                                             (line    6)
* math, in RTL:                          Arithmetic.         (line    6)
* MATH_LIBRARY:                          Misc.               (line  558)
* matherr:                               Library Calls.      (line   58)
* MAX_BITS_PER_WORD:                     Storage Layout.     (line   61)
* MAX_CONDITIONAL_EXECUTE:               Misc.               (line  580)
* MAX_FIXED_MODE_SIZE:                   Storage Layout.     (line  370)
* MAX_MOVE_MAX:                          Misc.               (line  120)
* MAX_OFILE_ALIGNMENT:                   Storage Layout.     (line  196)
* MAX_REGS_PER_ADDRESS:                  Addressing Modes.   (line   42)
* maxM3 instruction pattern:             Standard Names.     (line  234)
* may_trap_p, tree_could_trap_p:         Edges.              (line  115)
* maybe_undef:                           GTY Options.        (line  178)
* mcount:                                Profiling.          (line   12)
* MD_CAN_REDIRECT_BRANCH:                Misc.               (line  705)
* MD_EXEC_PREFIX:                        Driver.             (line  330)
* MD_FALLBACK_FRAME_STATE_FOR:           Exception Handling. (line   98)
* MD_HANDLE_UNWABI:                      Exception Handling. (line  118)
* MD_STARTFILE_PREFIX:                   Driver.             (line  358)
* MD_STARTFILE_PREFIX_1:                 Driver.             (line  364)
* MD_UNWIND_SUPPORT:                     Exception Handling. (line   94)
* mem:                                   Regs and Memory.    (line  249)
* mem and /c:                            Flags.              (line   84)
* mem and /f:                            Flags.              (line   88)
* mem and /i:                            Flags.              (line   70)
* mem and /j:                            Flags.              (line   64)
* mem and /s:                            Flags.              (line   55)
* mem and /u:                            Flags.              (line  137)
* mem and /v:                            Flags.              (line   79)
* mem, RTL sharing:                      Sharing.            (line   40)
* MEM_ALIAS_SET:                         Special Accessors.  (line    9)
* MEM_ALIGN:                             Special Accessors.  (line   36)
* MEM_EXPR:                              Special Accessors.  (line   20)
* MEM_IN_STRUCT_P:                       Flags.              (line   55)
* MEM_KEEP_ALIAS_SET_P:                  Flags.              (line   64)
* MEM_NOTRAP_P:                          Flags.              (line   84)
* MEM_OFFSET:                            Special Accessors.  (line   28)
* MEM_POINTER:                           Flags.              (line   88)
* MEM_READONLY_P:                        Flags.              (line  137)
* MEM_SCALAR_P:                          Flags.              (line   70)
* MEM_SIZE:                              Special Accessors.  (line   31)
* MEM_VOLATILE_P:                        Flags.              (line   79)
* MEMBER_TYPE_FORCES_BLK:                Storage Layout.     (line  350)
* memory reference, nonoffsettable:      Simple Constraints. (line  244)
* memory references in constraints:      Simple Constraints. (line   17)
* memory_barrier instruction pattern:    Standard Names.     (line 1407)
* MEMORY_MOVE_COST:                      Costs.              (line   29)
* memory_operand:                        Machine-Independent Predicates.
                                                             (line   58)
* METHOD_TYPE:                           Types.              (line    6)
* MIN_UNITS_PER_WORD:                    Storage Layout.     (line   71)
* MINIMUM_ATOMIC_ALIGNMENT:              Storage Layout.     (line  174)
* minM3 instruction pattern:             Standard Names.     (line  234)
* minus:                                 Arithmetic.         (line   36)
* minus and attributes:                  Expressions.        (line   64)
* minus, canonicalization of:            Insn Canonicalizations.
                                                             (line   27)
* MINUS_EXPR:                            Expression trees.   (line    6)
* MIPS coprocessor-definition macros:    MIPS Coprocessors.  (line    6)
* mod:                                   Arithmetic.         (line  131)
* mod and attributes:                    Expressions.        (line   64)
* mode classes:                          Machine Modes.      (line  219)
* mode iterators in .md files:           Mode Iterators.     (line    6)
* mode switching:                        Mode Switching.     (line    6)
* MODE_ACCUM:                            Machine Modes.      (line  249)
* MODE_AFTER:                            Mode Switching.     (line   49)
* MODE_BASE_REG_CLASS:                   Register Classes.   (line  112)
* MODE_BASE_REG_REG_CLASS:               Register Classes.   (line  118)
* MODE_CC:                               Machine Modes.      (line  268)
* MODE_CODE_BASE_REG_CLASS:              Register Classes.   (line  125)
* MODE_COMPLEX_FLOAT:                    Machine Modes.      (line  260)
* MODE_COMPLEX_INT:                      Machine Modes.      (line  257)
* MODE_DECIMAL_FLOAT:                    Machine Modes.      (line  237)
* MODE_ENTRY:                            Mode Switching.     (line   54)
* MODE_EXIT:                             Mode Switching.     (line   60)
* MODE_FLOAT:                            Machine Modes.      (line  233)
* MODE_FRACT:                            Machine Modes.      (line  241)
* MODE_FUNCTION:                         Machine Modes.      (line  264)
* MODE_HAS_INFINITIES:                   Storage Layout.     (line  441)
* MODE_HAS_NANS:                         Storage Layout.     (line  431)
* MODE_HAS_SIGN_DEPENDENT_ROUNDING:      Storage Layout.     (line  463)
* MODE_HAS_SIGNED_ZEROS:                 Storage Layout.     (line  447)
* MODE_INT:                              Machine Modes.      (line  225)
* MODE_NEEDED:                           Mode Switching.     (line   42)
* MODE_PARTIAL_INT:                      Machine Modes.      (line  229)
* MODE_PRIORITY_TO_MODE:                 Mode Switching.     (line   66)
* MODE_RANDOM:                           Machine Modes.      (line  273)
* MODE_UACCUM:                           Machine Modes.      (line  253)
* MODE_UFRACT:                           Machine Modes.      (line  245)
* MODES_TIEABLE_P:                       Values in Registers.
                                                             (line  129)
* modifiers in constraints:              Modifiers.          (line    6)
* MODIFY_EXPR:                           Expression trees.   (line    6)
* MODIFY_JNI_METHOD_CALL:                Misc.               (line  782)
* MODIFY_TARGET_NAME:                    Driver.             (line  385)
* modM3 instruction pattern:             Standard Names.     (line  222)
* modulo scheduling:                     RTL passes.         (line  131)
* MOVE_BY_PIECES_P:                      Costs.              (line  104)
* MOVE_MAX:                              Misc.               (line  115)
* MOVE_MAX_PIECES:                       Costs.              (line  110)
* MOVE_RATIO:                            Costs.              (line   91)
* movM instruction pattern:              Standard Names.     (line   11)
* movmemM instruction pattern:           Standard Names.     (line  668)
* movmisalignM instruction pattern:      Standard Names.     (line  126)
* movMODEcc instruction pattern:         Standard Names.     (line  885)
* movstr instruction pattern:            Standard Names.     (line  702)
* movstrictM instruction pattern:        Standard Names.     (line  120)
* msubMN4 instruction pattern:           Standard Names.     (line  387)
* mulhisi3 instruction pattern:          Standard Names.     (line  340)
* mulM3 instruction pattern:             Standard Names.     (line  222)
* mulqihi3 instruction pattern:          Standard Names.     (line  344)
* mulsidi3 instruction pattern:          Standard Names.     (line  344)
* mult:                                  Arithmetic.         (line   92)
* mult and attributes:                   Expressions.        (line   64)
* mult, canonicalization of:             Insn Canonicalizations.
                                                             (line   27)
* MULT_EXPR:                             Expression trees.   (line    6)
* MULTILIB_DEFAULTS:                     Driver.             (line  315)
* MULTILIB_DIRNAMES:                     Target Fragment.    (line   64)
* MULTILIB_EXCEPTIONS:                   Target Fragment.    (line   84)
* MULTILIB_EXTRA_OPTS:                   Target Fragment.    (line   96)
* MULTILIB_MATCHES:                      Target Fragment.    (line   77)
* MULTILIB_OPTIONS:                      Target Fragment.    (line   44)
* multiple alternative constraints:      Multi-Alternative.  (line    6)
* MULTIPLE_SYMBOL_SPACES:                Misc.               (line  538)
* multiplication:                        Arithmetic.         (line   92)
* multiplication with signed saturation: Arithmetic.         (line   92)
* multiplication with unsigned saturation: Arithmetic.       (line   92)
* MUST_USE_SJLJ_EXCEPTIONS:              Exception Region Output.
                                                             (line   64)
* n in constraint:                       Simple Constraints. (line   63)
* N_REG_CLASSES:                         Register Classes.   (line   76)
* name:                                  Identifiers.        (line    6)
* named patterns and conditions:         Patterns.           (line   47)
* names, pattern:                        Standard Names.     (line    6)
* namespace:                             Namespaces.         (line    6)
* namespace, class, scope:               Scopes.             (line    6)
* NAMESPACE_DECL <1>:                    Declarations.       (line    6)
* NAMESPACE_DECL:                        Namespaces.         (line    6)
* NATIVE_SYSTEM_HEADER_DIR:              Target Fragment.    (line  103)
* ne:                                    Comparisons.        (line   56)
* ne and attributes:                     Expressions.        (line   64)
* NE_EXPR:                               Expression trees.   (line    6)
* nearbyintM2 instruction pattern:       Standard Names.     (line  560)
* neg:                                   Arithmetic.         (line   81)
* neg and attributes:                    Expressions.        (line   64)
* neg, canonicalization of:              Insn Canonicalizations.
                                                             (line   27)
* NEGATE_EXPR:                           Expression trees.   (line    6)
* negation:                              Arithmetic.         (line   81)
* negation with signed saturation:       Arithmetic.         (line   81)
* negation with unsigned saturation:     Arithmetic.         (line   81)
* negM2 instruction pattern:             Standard Names.     (line  445)
* nested functions, trampolines for:     Trampolines.        (line    6)
* nested_ptr:                            GTY Options.        (line  185)
* next_bb, prev_bb, FOR_EACH_BB:         Basic Blocks.       (line   10)
* next_cc0_user:                         Jump Patterns.      (line   64)
* NEXT_INSN:                             Insns.              (line   30)
* NEXT_OBJC_RUNTIME:                     Library Calls.      (line   94)
* nil:                                   RTL Objects.        (line   73)
* NO_DBX_BNSYM_ENSYM:                    DBX Hooks.          (line   39)
* NO_DBX_FUNCTION_END:                   DBX Hooks.          (line   33)
* NO_DBX_GCC_MARKER:                     File Names and DBX. (line   28)
* NO_DBX_MAIN_SOURCE_DIRECTORY:          File Names and DBX. (line   23)
* NO_DOLLAR_IN_LABEL:                    Misc.               (line  502)
* NO_DOT_IN_LABEL:                       Misc.               (line  508)
* NO_FUNCTION_CSE:                       Costs.              (line  194)
* NO_IMPLICIT_EXTERN_C:                  Misc.               (line  376)
* NO_PROFILE_COUNTERS:                   Profiling.          (line   28)
* NO_REGS:                               Register Classes.   (line   17)
* NON_LVALUE_EXPR:                       Expression trees.   (line    6)
* nondeterministic finite state automaton: Processor pipeline description.
                                                             (line  296)
* nonimmediate_operand:                  Machine-Independent Predicates.
                                                             (line  101)
* nonlocal goto handler:                 Edges.              (line  171)
* nonlocal_goto instruction pattern:     Standard Names.     (line 1249)
* nonlocal_goto_receiver instruction pattern: Standard Names.
                                                             (line 1266)
* nonmemory_operand:                     Machine-Independent Predicates.
                                                             (line   97)
* nonoffsettable memory reference:       Simple Constraints. (line  244)
* nop instruction pattern:               Standard Names.     (line 1067)
* NOP_EXPR:                              Expression trees.   (line    6)
* normal predicates:                     Predicates.         (line   31)
* not:                                   Arithmetic.         (line  149)
* not and attributes:                    Expressions.        (line   50)
* not equal:                             Comparisons.        (line   56)
* not, canonicalization of:              Insn Canonicalizations.
                                                             (line   27)
* note:                                  Insns.              (line  168)
* note and /i:                           Flags.              (line   44)
* note and /v:                           Flags.              (line   29)
* NOTE_INSN_BASIC_BLOCK, CODE_LABEL, notes: Basic Blocks.    (line   41)
* NOTE_INSN_BLOCK_BEG:                   Insns.              (line  193)
* NOTE_INSN_BLOCK_END:                   Insns.              (line  193)
* NOTE_INSN_DELETED:                     Insns.              (line  183)
* NOTE_INSN_DELETED_LABEL:               Insns.              (line  188)
* NOTE_INSN_EH_REGION_BEG:               Insns.              (line  199)
* NOTE_INSN_EH_REGION_END:               Insns.              (line  199)
* NOTE_INSN_FUNCTION_BEG:                Insns.              (line  223)
* NOTE_INSN_LOOP_BEG:                    Insns.              (line  207)
* NOTE_INSN_LOOP_CONT:                   Insns.              (line  213)
* NOTE_INSN_LOOP_END:                    Insns.              (line  207)
* NOTE_INSN_LOOP_VTOP:                   Insns.              (line  217)
* NOTE_LINE_NUMBER:                      Insns.              (line  168)
* NOTE_SOURCE_FILE:                      Insns.              (line  168)
* NOTICE_UPDATE_CC:                      Condition Code.     (line   33)
* NUM_MACHINE_MODES:                     Machine Modes.      (line  286)
* NUM_MODES_FOR_MODE_SWITCHING:          Mode Switching.     (line   30)
* Number of iterations analysis:         Number of iterations.
                                                             (line    6)
* o in constraint:                       Simple Constraints. (line   21)
* OBJC_GEN_METHOD_LABEL:                 Label Output.       (line  411)
* OBJC_JBLEN:                            Misc.               (line  917)
* OBJECT_FORMAT_COFF:                    Macros for Initialization.
                                                             (line   97)
* OFFSET_TYPE:                           Types.              (line    6)
* offsettable address:                   Simple Constraints. (line   21)
* OImode:                                Machine Modes.      (line   51)
* Omega a solver for linear programming problems: Omega.     (line    6)
* OMP_ATOMIC:                            Expression trees.   (line    6)
* OMP_CLAUSE:                            Expression trees.   (line    6)
* OMP_CONTINUE:                          Expression trees.   (line    6)
* OMP_CRITICAL:                          Expression trees.   (line    6)
* OMP_FOR:                               Expression trees.   (line    6)
* OMP_MASTER:                            Expression trees.   (line    6)
* OMP_ORDERED:                           Expression trees.   (line    6)
* OMP_PARALLEL:                          Expression trees.   (line    6)
* OMP_RETURN:                            Expression trees.   (line    6)
* OMP_SECTION:                           Expression trees.   (line    6)
* OMP_SECTIONS:                          Expression trees.   (line    6)
* OMP_SINGLE:                            Expression trees.   (line    6)
* one_cmplM2 instruction pattern:        Standard Names.     (line  647)
* operand access:                        Accessors.          (line    6)
* Operand Access Routines:               Statement Operands. (line  119)
* operand constraints:                   Constraints.        (line    6)
* Operand Iterators:                     Statement Operands. (line  119)
* operand predicates:                    Predicates.         (line    6)
* operand substitution:                  Output Template.    (line    6)
* operands <1>:                          Patterns.           (line   53)
* operands:                              Statement Operands. (line    6)
* operator predicates:                   Predicates.         (line    6)
* optc-gen.awk:                          Options.            (line    6)
* Optimization infrastructure for GIMPLE: Tree SSA.          (line    6)
* OPTIMIZATION_OPTIONS:                  Run-time Target.    (line  120)
* OPTIMIZE_MODE_SWITCHING:               Mode Switching.     (line    9)
* option specification files:            Options.            (line    6)
* OPTION_DEFAULT_SPECS:                  Driver.             (line   88)
* optional hardware or system features:  Run-time Target.    (line   59)
* options, directory search:             Including Patterns. (line   44)
* order of register allocation:          Allocation Order.   (line    6)
* ORDER_REGS_FOR_LOCAL_ALLOC:            Allocation Order.   (line   23)
* ORDERED_EXPR:                          Expression trees.   (line    6)
* Ordering of Patterns:                  Pattern Ordering.   (line    6)
* ORIGINAL_REGNO:                        Special Accessors.  (line   40)
* other register constraints:            Simple Constraints. (line  161)
* OUTGOING_REG_PARM_STACK_SPACE:         Stack Arguments.    (line   70)
* OUTGOING_REGNO:                        Register Basics.    (line   98)
* output of assembler code:              File Framework.     (line    6)
* output statements:                     Output Statement.   (line    6)
* output templates:                      Output Template.    (line    6)
* OUTPUT_ADDR_CONST_EXTRA:               Data Output.        (line   39)
* output_asm_insn:                       Output Statement.   (line   53)
* OUTPUT_QUOTED_STRING:                  File Framework.     (line   76)
* OVERLOAD:                              Functions.          (line    6)
* OVERRIDE_OPTIONS:                      Run-time Target.    (line  104)
* OVL_CURRENT:                           Functions.          (line    6)
* OVL_NEXT:                              Functions.          (line    6)
* p in constraint:                       Simple Constraints. (line  152)
* PAD_VARARGS_DOWN:                      Register Arguments. (line  205)
* parallel:                              Side Effects.       (line  201)
* param_is:                              GTY Options.        (line  113)
* parameters, c++ abi:                   C++ ABI.            (line    6)
* parameters, miscellaneous:             Misc.               (line    6)
* parameters, precompiled headers:       PCH Target.         (line    6)
* paramN_is:                             GTY Options.        (line  131)
* parity:                                Arithmetic.         (line  228)
* parityM2 instruction pattern:          Standard Names.     (line  641)
* PARM_BOUNDARY:                         Storage Layout.     (line  144)
* PARM_DECL:                             Declarations.       (line    6)
* PARSE_LDD_OUTPUT:                      Macros for Initialization.
                                                             (line  121)
* passes and files of the compiler:      Passes.             (line    6)
* passing arguments:                     Interface.          (line   36)
* PATH_SEPARATOR:                        Filesystem.         (line   31)
* PATTERN:                               Insns.              (line  247)
* pattern conditions:                    Patterns.           (line   43)
* pattern names:                         Standard Names.     (line    6)
* Pattern Ordering:                      Pattern Ordering.   (line    6)
* patterns:                              Patterns.           (line    6)
* pc:                                    Regs and Memory.    (line  236)
* pc and attributes:                     Insn Lengths.       (line   20)
* pc, RTL sharing:                       Sharing.            (line   25)
* PC_REGNUM:                             Register Basics.    (line  112)
* pc_rtx:                                Regs and Memory.    (line  241)
* PCC_BITFIELD_TYPE_MATTERS:             Storage Layout.     (line  264)
* PCC_STATIC_STRUCT_RETURN:              Aggregate Return.   (line   64)
* PDImode:                               Machine Modes.      (line   40)
* peephole optimization, RTL representation: Side Effects.   (line  235)
* peephole optimizer definitions:        Peephole Definitions.
                                                             (line    6)
* per-function data:                     Per-Function Data.  (line    6)
* percent sign:                          Output Template.    (line    6)
* PHI nodes:                             SSA.                (line   31)
* PHI_ARG_DEF:                           SSA.                (line   71)
* PHI_ARG_EDGE:                          SSA.                (line   68)
* PHI_ARG_ELT:                           SSA.                (line   63)
* PHI_NUM_ARGS:                          SSA.                (line   59)
* PHI_RESULT:                            SSA.                (line   56)
* PIC:                                   PIC.                (line    6)
* PIC_OFFSET_TABLE_REG_CALL_CLOBBERED:   PIC.                (line   26)
* PIC_OFFSET_TABLE_REGNUM:               PIC.                (line   16)
* pipeline hazard recognizer:            Processor pipeline description.
                                                             (line    6)
* plus:                                  Arithmetic.         (line   14)
* plus and attributes:                   Expressions.        (line   64)
* plus, canonicalization of:             Insn Canonicalizations.
                                                             (line   27)
* PLUS_EXPR:                             Expression trees.   (line    6)
* Pmode:                                 Misc.               (line  344)
* pmode_register_operand:                Machine-Independent Predicates.
                                                             (line   35)
* pointer:                               Types.              (line    6)
* POINTER_PLUS_EXPR:                     Expression trees.   (line    6)
* POINTER_SIZE:                          Storage Layout.     (line   83)
* POINTER_TYPE:                          Types.              (line    6)
* POINTERS_EXTEND_UNSIGNED:              Storage Layout.     (line   89)
* pop_operand:                           Machine-Independent Predicates.
                                                             (line   88)
* popcount:                              Arithmetic.         (line  224)
* popcountM2 instruction pattern:        Standard Names.     (line  635)
* portability:                           Portability.        (line    6)
* position independent code:             PIC.                (line    6)
* post_dec:                              Incdec.             (line   25)
* post_inc:                              Incdec.             (line   30)
* post_modify:                           Incdec.             (line   33)
* POSTDECREMENT_EXPR:                    Expression trees.   (line    6)
* POSTINCREMENT_EXPR:                    Expression trees.   (line    6)
* POWI_MAX_MULTS:                        Misc.               (line  830)
* powM3 instruction pattern:             Standard Names.     (line  509)
* pragma:                                Misc.               (line  381)
* pre_dec:                               Incdec.             (line    8)
* PRE_GCC3_DWARF_FRAME_REGISTERS:        Frame Registers.    (line  110)
* pre_inc:                               Incdec.             (line   22)
* pre_modify:                            Incdec.             (line   51)
* PREDECREMENT_EXPR:                     Expression trees.   (line    6)
* predefined macros:                     Run-time Target.    (line    6)
* predicates:                            Predicates.         (line    6)
* predicates and machine modes:          Predicates.         (line   31)
* predication:                           Conditional Execution.
                                                             (line    6)
* predict.def:                           Profile information.
                                                             (line   24)
* PREFERRED_DEBUGGING_TYPE:              All Debuggers.      (line   42)
* PREFERRED_OUTPUT_RELOAD_CLASS:         Register Classes.   (line  231)
* PREFERRED_RELOAD_CLASS:                Register Classes.   (line  196)
* PREFERRED_STACK_BOUNDARY:              Storage Layout.     (line  158)
* prefetch:                              Side Effects.       (line  309)
* prefetch instruction pattern:          Standard Names.     (line 1386)
* PREINCREMENT_EXPR:                     Expression trees.   (line    6)
* presence_set:                          Processor pipeline description.
                                                             (line  215)
* preserving SSA form:                   SSA.                (line   76)
* preserving virtual SSA form:           SSA.                (line  189)
* prev_active_insn:                      define_peephole.    (line   60)
* prev_cc0_setter:                       Jump Patterns.      (line   64)
* PREV_INSN:                             Insns.              (line   26)
* PRINT_OPERAND:                         Instruction Output. (line   68)
* PRINT_OPERAND_ADDRESS:                 Instruction Output. (line   96)
* PRINT_OPERAND_PUNCT_VALID_P:           Instruction Output. (line   89)
* processor functional units:            Processor pipeline description.
                                                             (line    6)
* processor pipeline description:        Processor pipeline description.
                                                             (line    6)
* product:                               Arithmetic.         (line   92)
* profile feedback:                      Profile information.
                                                             (line   14)
* profile representation:                Profile information.
                                                             (line    6)
* PROFILE_BEFORE_PROLOGUE:               Profiling.          (line   35)
* PROFILE_HOOK:                          Profiling.          (line   23)
* profiling, code generation:            Profiling.          (line    6)
* program counter:                       Regs and Memory.    (line  237)
* prologue:                              Function Entry.     (line    6)
* prologue instruction pattern:          Standard Names.     (line 1332)
* PROMOTE_FUNCTION_MODE:                 Storage Layout.     (line  123)
* PROMOTE_MODE:                          Storage Layout.     (line  100)
* pseudo registers:                      Regs and Memory.    (line    9)
* PSImode:                               Machine Modes.      (line   32)
* PTRDIFF_TYPE:                          Type Layout.        (line  184)
* PTRMEM_CST:                            Expression trees.   (line    6)
* PTRMEM_CST_CLASS:                      Expression trees.   (line    6)
* PTRMEM_CST_MEMBER:                     Expression trees.   (line    6)
* purge_dead_edges <1>:                  Maintaining the CFG.
                                                             (line   93)
* purge_dead_edges:                      Edges.              (line  104)
* push address instruction:              Simple Constraints. (line  152)
* PUSH_ARGS:                             Stack Arguments.    (line   18)
* PUSH_ARGS_REVERSED:                    Stack Arguments.    (line   26)
* push_operand:                          Machine-Independent Predicates.
                                                             (line   81)
* push_reload:                           Addressing Modes.   (line  157)
* PUSH_ROUNDING:                         Stack Arguments.    (line   32)
* pushM1 instruction pattern:            Standard Names.     (line  209)
* PUT_CODE:                              RTL Objects.        (line   47)
* PUT_MODE:                              Machine Modes.      (line  283)
* PUT_REG_NOTE_KIND:                     Insns.              (line  309)
* PUT_SDB_:                              SDB and DWARF.      (line   63)
* QCmode:                                Machine Modes.      (line  197)
* QFmode:                                Machine Modes.      (line   54)
* QImode:                                Machine Modes.      (line   25)
* QImode, in insn:                       Insns.              (line  231)
* QQmode:                                Machine Modes.      (line  103)
* qualified type:                        Types.              (line    6)
* querying function unit reservations:   Processor pipeline description.
                                                             (line   90)
* question mark:                         Multi-Alternative.  (line   41)
* quotient:                              Arithmetic.         (line  111)
* r in constraint:                       Simple Constraints. (line   54)
* RANGE_TEST_NON_SHORT_CIRCUIT:          Costs.              (line  198)
* RDIV_EXPR:                             Expression trees.   (line    6)
* READONLY_DATA_SECTION_ASM_OP:          Sections.           (line   63)
* real operands:                         Statement Operands. (line    6)
* REAL_ARITHMETIC:                       Floating Point.     (line   66)
* REAL_CST:                              Expression trees.   (line    6)
* REAL_LIBGCC_SPEC:                      Driver.             (line  187)
* REAL_NM_FILE_NAME:                     Macros for Initialization.
                                                             (line  106)
* REAL_TYPE:                             Types.              (line    6)
* REAL_VALUE_ABS:                        Floating Point.     (line   82)
* REAL_VALUE_ATOF:                       Floating Point.     (line   50)
* REAL_VALUE_FIX:                        Floating Point.     (line   41)
* REAL_VALUE_FROM_INT:                   Floating Point.     (line   99)
* REAL_VALUE_ISINF:                      Floating Point.     (line   59)
* REAL_VALUE_ISNAN:                      Floating Point.     (line   62)
* REAL_VALUE_NEGATE:                     Floating Point.     (line   79)
* REAL_VALUE_NEGATIVE:                   Floating Point.     (line   56)
* REAL_VALUE_TO_INT:                     Floating Point.     (line   93)
* REAL_VALUE_TO_TARGET_DECIMAL128:       Data Output.        (line  144)
* REAL_VALUE_TO_TARGET_DECIMAL32:        Data Output.        (line  142)
* REAL_VALUE_TO_TARGET_DECIMAL64:        Data Output.        (line  143)
* REAL_VALUE_TO_TARGET_DOUBLE:           Data Output.        (line  140)
* REAL_VALUE_TO_TARGET_LONG_DOUBLE:      Data Output.        (line  141)
* REAL_VALUE_TO_TARGET_SINGLE:           Data Output.        (line  139)
* REAL_VALUE_TRUNCATE:                   Floating Point.     (line   86)
* REAL_VALUE_TYPE:                       Floating Point.     (line   26)
* REAL_VALUE_UNSIGNED_FIX:               Floating Point.     (line   45)
* REAL_VALUES_EQUAL:                     Floating Point.     (line   32)
* REAL_VALUES_LESS:                      Floating Point.     (line   38)
* REALPART_EXPR:                         Expression trees.   (line    6)
* recog_data.operand:                    Instruction Output. (line   39)
* recognizing insns:                     RTL Template.       (line    6)
* RECORD_TYPE <1>:                       Classes.            (line    6)
* RECORD_TYPE:                           Types.              (line    6)
* redirect_edge_and_branch:              Profile information.
                                                             (line   71)
* redirect_edge_and_branch, redirect_jump: Maintaining the CFG.
                                                             (line  103)
* reduc_smax_M instruction pattern:      Standard Names.     (line  240)
* reduc_smin_M instruction pattern:      Standard Names.     (line  240)
* reduc_splus_M instruction pattern:     Standard Names.     (line  252)
* reduc_umax_M instruction pattern:      Standard Names.     (line  246)
* reduc_umin_M instruction pattern:      Standard Names.     (line  246)
* reduc_uplus_M instruction pattern:     Standard Names.     (line  258)
* reference:                             Types.              (line    6)
* REFERENCE_TYPE:                        Types.              (line    6)
* reg:                                   Regs and Memory.    (line    9)
* reg and /f:                            Flags.              (line   97)
* reg and /i:                            Flags.              (line   92)
* reg and /v:                            Flags.              (line  101)
* reg, RTL sharing:                      Sharing.            (line   17)
* REG_ALLOC_ORDER:                       Allocation Order.   (line    9)
* REG_BR_PRED:                           Insns.              (line  530)
* REG_BR_PROB:                           Insns.              (line  524)
* REG_BR_PROB_BASE, BB_FREQ_BASE, count: Profile information.
                                                             (line   82)
* REG_BR_PROB_BASE, EDGE_FREQUENCY:      Profile information.
                                                             (line   52)
* REG_CC_SETTER:                         Insns.              (line  495)
* REG_CC_USER:                           Insns.              (line  495)
* REG_CLASS_CONTENTS:                    Register Classes.   (line   86)
* reg_class_contents:                    Register Basics.    (line   59)
* REG_CLASS_FROM_CONSTRAINT:             Old Constraints.    (line   35)
* REG_CLASS_FROM_LETTER:                 Old Constraints.    (line   27)
* REG_CLASS_NAMES:                       Register Classes.   (line   81)
* REG_CROSSING_JUMP:                     Insns.              (line  384)
* REG_DEAD:                              Insns.              (line  320)
* REG_DEAD, REG_UNUSED:                  Liveness information.
                                                             (line   32)
* REG_DEP_ANTI:                          Insns.              (line  517)
* REG_DEP_OUTPUT:                        Insns.              (line  513)
* REG_DEP_TRUE:                          Insns.              (line  510)
* REG_EH_REGION, EDGE_ABNORMAL_CALL:     Edges.              (line  110)
* REG_EQUAL:                             Insns.              (line  400)
* REG_EQUIV:                             Insns.              (line  400)
* REG_EXPR:                              Special Accessors.  (line   46)
* REG_FRAME_RELATED_EXPR:                Insns.              (line  536)
* REG_FUNCTION_VALUE_P:                  Flags.              (line   92)
* REG_INC:                               Insns.              (line  336)
* reg_label and /v:                      Flags.              (line   50)
* REG_LABEL_OPERAND:                     Insns.              (line  366)
* REG_LABEL_TARGET:                      Insns.              (line  375)
* REG_LIBCALL:                           Insns.              (line  488)
* REG_LIBCALL_ID:                        Insns.              (line  541)
* reg_names <1>:                         Instruction Output. (line   80)
* reg_names:                             Register Basics.    (line   59)
* REG_NO_CONFLICT:                       Insns.              (line  350)
* REG_NONNEG:                            Insns.              (line  342)
* REG_NOTE_KIND:                         Insns.              (line  309)
* REG_NOTES:                             Insns.              (line  283)
* REG_OFFSET:                            Special Accessors.  (line   50)
* REG_OK_STRICT:                         Addressing Modes.   (line   67)
* REG_PARM_STACK_SPACE:                  Stack Arguments.    (line   56)
* REG_PARM_STACK_SPACE, and FUNCTION_ARG: Register Arguments.
                                                             (line   52)
* REG_POINTER:                           Flags.              (line   97)
* REG_RETVAL:                            Insns.              (line  472)
* REG_SETJMP:                            Insns.              (line  394)
* REG_UNUSED:                            Insns.              (line  329)
* REG_USERVAR_P:                         Flags.              (line  101)
* regclass_for_constraint:               C Constraint Interface.
                                                             (line   60)
* register allocation order:             Allocation Order.   (line    6)
* register class definitions:            Register Classes.   (line    6)
* register class preference constraints: Class Preferences.  (line    6)
* register pairs:                        Values in Registers.
                                                             (line   69)
* Register Transfer Language (RTL):      RTL.                (line    6)
* register usage:                        Registers.          (line    6)
* REGISTER_MOVE_COST:                    Costs.              (line   10)
* REGISTER_NAMES:                        Instruction Output. (line    9)
* register_operand:                      Machine-Independent Predicates.
                                                             (line   30)
* REGISTER_PREFIX:                       Instruction Output. (line  124)
* REGISTER_TARGET_PRAGMAS:               Misc.               (line  382)
* registers arguments:                   Register Arguments. (line    6)
* registers in constraints:              Simple Constraints. (line   54)
* REGMODE_NATURAL_SIZE:                  Values in Registers.
                                                             (line   50)
* REGNO_MODE_CODE_OK_FOR_BASE_P:         Register Classes.   (line  170)
* REGNO_MODE_OK_FOR_BASE_P:              Register Classes.   (line  146)
* REGNO_MODE_OK_FOR_REG_BASE_P:          Register Classes.   (line  157)
* REGNO_OK_FOR_BASE_P:                   Register Classes.   (line  140)
* REGNO_OK_FOR_INDEX_P:                  Register Classes.   (line  181)
* REGNO_REG_CLASS:                       Register Classes.   (line  101)
* regs_ever_live:                        Function Entry.     (line   21)
* regular expressions:                   Processor pipeline description.
                                                             (line    6)
* relative costs:                        Costs.              (line    6)
* RELATIVE_PREFIX_NOT_LINKDIR:           Driver.             (line  325)
* reload pass:                           Regs and Memory.    (line  148)
* reload_completed:                      Standard Names.     (line 1034)
* reload_in instruction pattern:         Standard Names.     (line   99)
* reload_in_progress:                    Standard Names.     (line   57)
* reload_out instruction pattern:        Standard Names.     (line   99)
* reloading:                             RTL passes.         (line  172)
* remainder:                             Arithmetic.         (line  131)
* remainderM3 instruction pattern:       Standard Names.     (line  468)
* reorder:                               GTY Options.        (line  209)
* representation of RTL:                 RTL.                (line    6)
* reservation delays:                    Processor pipeline description.
                                                             (line    6)
* rest_of_decl_compilation:              Parsing pass.       (line   52)
* rest_of_type_compilation:              Parsing pass.       (line   52)
* restore_stack_block instruction pattern: Standard Names.   (line 1168)
* restore_stack_function instruction pattern: Standard Names.
                                                             (line 1168)
* restore_stack_nonlocal instruction pattern: Standard Names.
                                                             (line 1168)
* RESULT_DECL:                           Declarations.       (line    6)
* return:                                Side Effects.       (line   72)
* return instruction pattern:            Standard Names.     (line 1021)
* return values in registers:            Scalar Return.      (line    6)
* RETURN_ADDR_IN_PREVIOUS_FRAME:         Frame Layout.       (line  135)
* RETURN_ADDR_OFFSET:                    Exception Handling. (line   60)
* RETURN_ADDR_RTX:                       Frame Layout.       (line  124)
* RETURN_ADDRESS_POINTER_REGNUM:         Frame Registers.    (line   51)
* RETURN_EXPR:                           Function Bodies.    (line    6)
* RETURN_POPS_ARGS:                      Stack Arguments.    (line   88)
* RETURN_STMT:                           Function Bodies.    (line    6)
* return_val:                            Flags.              (line  276)
* return_val, in mem:                    Flags.              (line   70)
* return_val, in reg:                    Flags.              (line   92)
* return_val, in symbol_ref:             Flags.              (line  205)
* returning aggregate values:            Aggregate Return.   (line    6)
* returning structures and unions:       Interface.          (line   10)
* reverse probability:                   Profile information.
                                                             (line   66)
* REVERSE_CONDEXEC_PREDICATES_P:         Condition Code.     (line  129)
* REVERSE_CONDITION:                     Condition Code.     (line  116)
* REVERSIBLE_CC_MODE:                    Condition Code.     (line  102)
* right rotate:                          Arithmetic.         (line  190)
* right shift:                           Arithmetic.         (line  185)
* rintM2 instruction pattern:            Standard Names.     (line  568)
* RISC:                                  Processor pipeline description.
                                                             (line    6)
* roots, marking:                        GGC Roots.          (line    6)
* rotate:                                Arithmetic.         (line  190)
* rotatert:                              Arithmetic.         (line  190)
* rotlM3 instruction pattern:            Standard Names.     (line  441)
* rotrM3 instruction pattern:            Standard Names.     (line  441)
* Rough GIMPLE Grammar:                  Rough GIMPLE Grammar.
                                                             (line    6)
* ROUND_DIV_EXPR:                        Expression trees.   (line    6)
* ROUND_MOD_EXPR:                        Expression trees.   (line    6)
* ROUND_TOWARDS_ZERO:                    Storage Layout.     (line  472)
* ROUND_TYPE_ALIGN:                      Storage Layout.     (line  361)
* roundM2 instruction pattern:           Standard Names.     (line  544)
* RSHIFT_EXPR:                           Expression trees.   (line    6)
* RTL addition:                          Arithmetic.         (line   14)
* RTL addition with signed saturation:   Arithmetic.         (line   14)
* RTL addition with unsigned saturation: Arithmetic.         (line   14)
* RTL classes:                           RTL Classes.        (line    6)
* RTL comparison:                        Arithmetic.         (line   43)
* RTL comparison operations:             Comparisons.        (line    6)
* RTL constant expression types:         Constants.          (line    6)
* RTL constants:                         Constants.          (line    6)
* RTL declarations:                      RTL Declarations.   (line    6)
* RTL difference:                        Arithmetic.         (line   36)
* RTL expression:                        RTL Objects.        (line    6)
* RTL expressions for arithmetic:        Arithmetic.         (line    6)
* RTL format:                            RTL Classes.        (line   71)
* RTL format characters:                 RTL Classes.        (line   76)
* RTL function-call insns:               Calls.              (line    6)
* RTL insn template:                     RTL Template.       (line    6)
* RTL integers:                          RTL Objects.        (line    6)
* RTL memory expressions:                Regs and Memory.    (line    6)
* RTL object types:                      RTL Objects.        (line    6)
* RTL postdecrement:                     Incdec.             (line    6)
* RTL postincrement:                     Incdec.             (line    6)
* RTL predecrement:                      Incdec.             (line    6)
* RTL preincrement:                      Incdec.             (line    6)
* RTL register expressions:              Regs and Memory.    (line    6)
* RTL representation:                    RTL.                (line    6)
* RTL side effect expressions:           Side Effects.       (line    6)
* RTL strings:                           RTL Objects.        (line    6)
* RTL structure sharing assumptions:     Sharing.            (line    6)
* RTL subtraction:                       Arithmetic.         (line   36)
* RTL subtraction with signed saturation: Arithmetic.        (line   36)
* RTL subtraction with unsigned saturation: Arithmetic.      (line   36)
* RTL sum:                               Arithmetic.         (line   14)
* RTL vectors:                           RTL Objects.        (line    6)
* RTX (See RTL):                         RTL Objects.        (line    6)
* RTX codes, classes of:                 RTL Classes.        (line    6)
* RTX_FRAME_RELATED_P:                   Flags.              (line  110)
* run-time conventions:                  Interface.          (line    6)
* run-time target specification:         Run-time Target.    (line    6)
* s in constraint:                       Simple Constraints. (line   90)
* same_type_p:                           Types.              (line  148)
* SAmode:                                Machine Modes.      (line  148)
* sat_fract:                             Conversions.        (line   91)
* satfractMN2 instruction pattern:       Standard Names.     (line  837)
* satfractunsMN2 instruction pattern:    Standard Names.     (line  850)
* satisfies_constraint_:                 C Constraint Interface.
                                                             (line   47)
* SAVE_EXPR:                             Expression trees.   (line    6)
* save_stack_block instruction pattern:  Standard Names.     (line 1168)
* save_stack_function instruction pattern: Standard Names.   (line 1168)
* save_stack_nonlocal instruction pattern: Standard Names.   (line 1168)
* SBSS_SECTION_ASM_OP:                   Sections.           (line   77)
* Scalar evolutions:                     Scalar evolutions.  (line    6)
* scalars, returned as values:           Scalar Return.      (line    6)
* SCHED_GROUP_P:                         Flags.              (line  151)
* SCmode:                                Machine Modes.      (line  197)
* sCOND instruction pattern:             Standard Names.     (line  905)
* scratch:                               Regs and Memory.    (line  173)
* scratch operands:                      Regs and Memory.    (line  173)
* scratch, RTL sharing:                  Sharing.            (line   35)
* scratch_operand:                       Machine-Independent Predicates.
                                                             (line   50)
* SDATA_SECTION_ASM_OP:                  Sections.           (line   58)
* SDB_ALLOW_FORWARD_REFERENCES:          SDB and DWARF.      (line   81)
* SDB_ALLOW_UNKNOWN_REFERENCES:          SDB and DWARF.      (line   76)
* SDB_DEBUGGING_INFO:                    SDB and DWARF.      (line    9)
* SDB_DELIM:                             SDB and DWARF.      (line   69)
* SDB_OUTPUT_SOURCE_LINE:                SDB and DWARF.      (line   86)
* SDmode:                                Machine Modes.      (line   85)
* sdot_prodM instruction pattern:        Standard Names.     (line  264)
* search options:                        Including Patterns. (line   44)
* SECONDARY_INPUT_RELOAD_CLASS:          Register Classes.   (line  335)
* SECONDARY_MEMORY_NEEDED:               Register Classes.   (line  391)
* SECONDARY_MEMORY_NEEDED_MODE:          Register Classes.   (line  410)
* SECONDARY_MEMORY_NEEDED_RTX:           Register Classes.   (line  401)
* SECONDARY_OUTPUT_RELOAD_CLASS:         Register Classes.   (line  336)
* SECONDARY_RELOAD_CLASS:                Register Classes.   (line  334)
* SELECT_CC_MODE:                        Condition Code.     (line   68)
* Selection Statements:                  Selection Statements.
                                                             (line    6)
* sequence:                              Side Effects.       (line  251)
* set:                                   Side Effects.       (line   15)
* set and /f:                            Flags.              (line  110)
* SET_ASM_OP:                            Label Output.       (line  378)
* set_attr:                              Tagging Insns.      (line   31)
* set_attr_alternative:                  Tagging Insns.      (line   49)
* SET_BY_PIECES_P:                       Costs.              (line  139)
* SET_DEST:                              Side Effects.       (line   69)
* SET_IS_RETURN_P:                       Flags.              (line  160)
* SET_LABEL_KIND:                        Insns.              (line  140)
* set_optab_libfunc:                     Library Calls.      (line   15)
* SET_RATIO:                             Costs.              (line  130)
* SET_SRC:                               Side Effects.       (line   69)
* SET_TYPE_STRUCTURAL_EQUALITY:          Types.              (line    6)
* setmemM instruction pattern:           Standard Names.     (line  710)
* SETUP_FRAME_ADDRESSES:                 Frame Layout.       (line  102)
* SF_SIZE:                               Type Layout.        (line  129)
* SFmode:                                Machine Modes.      (line   66)
* sharing of RTL components:             Sharing.            (line    6)
* shift:                                 Arithmetic.         (line  168)
* SHIFT_COUNT_TRUNCATED:                 Misc.               (line  127)
* SHLIB_SUFFIX:                          Macros for Initialization.
                                                             (line  129)
* SHORT_ACCUM_TYPE_SIZE:                 Type Layout.        (line   83)
* SHORT_FRACT_TYPE_SIZE:                 Type Layout.        (line   63)
* SHORT_IMMEDIATES_SIGN_EXTEND:          Misc.               (line   96)
* SHORT_TYPE_SIZE:                       Type Layout.        (line   16)
* sibcall_epilogue instruction pattern:  Standard Names.     (line 1358)
* sibling call:                          Edges.              (line  122)
* SIBLING_CALL_P:                        Flags.              (line  164)
* sign_extend:                           Conversions.        (line   23)
* sign_extract:                          Bit-Fields.         (line    8)
* sign_extract, canonicalization of:     Insn Canonicalizations.
                                                             (line   96)
* signed division:                       Arithmetic.         (line  111)
* signed division with signed saturation: Arithmetic.        (line  111)
* signed maximum:                        Arithmetic.         (line  136)
* signed minimum:                        Arithmetic.         (line  136)
* SImode:                                Machine Modes.      (line   37)
* simple constraints:                    Simple Constraints. (line    6)
* sincos math function, implicit usage:  Library Calls.      (line   84)
* sinM2 instruction pattern:             Standard Names.     (line  485)
* SIZE_ASM_OP:                           Label Output.       (line   23)
* SIZE_TYPE:                             Type Layout.        (line  168)
* skip:                                  GTY Options.        (line   76)
* SLOW_BYTE_ACCESS:                      Costs.              (line   60)
* SLOW_UNALIGNED_ACCESS:                 Costs.              (line   75)
* SMALL_REGISTER_CLASSES:                Register Classes.   (line  433)
* smax:                                  Arithmetic.         (line  136)
* smin:                                  Arithmetic.         (line  136)
* sms, swing, software pipelining:       RTL passes.         (line  131)
* smulM3_highpart instruction pattern:   Standard Names.     (line  356)
* soft float library:                    Soft float library routines.
                                                             (line    6)
* special:                               GTY Options.        (line  229)
* special predicates:                    Predicates.         (line   31)
* SPECS:                                 Target Fragment.    (line  108)
* speed of instructions:                 Costs.              (line    6)
* split_block:                           Maintaining the CFG.
                                                             (line  110)
* splitting instructions:                Insn Splitting.     (line    6)
* SQmode:                                Machine Modes.      (line  111)
* sqrt:                                  Arithmetic.         (line  198)
* sqrtM2 instruction pattern:            Standard Names.     (line  451)
* square root:                           Arithmetic.         (line  198)
* ss_ashift:                             Arithmetic.         (line  168)
* ss_div:                                Arithmetic.         (line  111)
* ss_minus:                              Arithmetic.         (line   36)
* ss_mult:                               Arithmetic.         (line   92)
* ss_neg:                                Arithmetic.         (line   81)
* ss_plus:                               Arithmetic.         (line   14)
* ss_truncate:                           Conversions.        (line   43)
* SSA:                                   SSA.                (line    6)
* SSA_NAME_DEF_STMT:                     SSA.                (line  224)
* SSA_NAME_VERSION:                      SSA.                (line  229)
* ssaddM3 instruction pattern:           Standard Names.     (line  222)
* ssashlM3 instruction pattern:          Standard Names.     (line  431)
* ssdivM3 instruction pattern:           Standard Names.     (line  222)
* ssmaddMN4 instruction pattern:         Standard Names.     (line  379)
* ssmsubMN4 instruction pattern:         Standard Names.     (line  403)
* ssmulM3 instruction pattern:           Standard Names.     (line  222)
* ssnegM2 instruction pattern:           Standard Names.     (line  445)
* sssubM3 instruction pattern:           Standard Names.     (line  222)
* ssum_widenM3 instruction pattern:      Standard Names.     (line  274)
* stack arguments:                       Stack Arguments.    (line    6)
* stack frame layout:                    Frame Layout.       (line    6)
* stack smashing protection:             Stack Smashing Protection.
                                                             (line    6)
* STACK_ALIGNMENT_NEEDED:                Frame Layout.       (line   48)
* STACK_BOUNDARY:                        Storage Layout.     (line  150)
* STACK_CHECK_BUILTIN:                   Stack Checking.     (line   29)
* STACK_CHECK_FIXED_FRAME_SIZE:          Stack Checking.     (line   64)
* STACK_CHECK_MAX_FRAME_SIZE:            Stack Checking.     (line   55)
* STACK_CHECK_MAX_VAR_SIZE:              Stack Checking.     (line   71)
* STACK_CHECK_PROBE_INTERVAL:            Stack Checking.     (line   37)
* STACK_CHECK_PROBE_LOAD:                Stack Checking.     (line   44)
* STACK_CHECK_PROTECT:                   Stack Checking.     (line   50)
* STACK_DYNAMIC_OFFSET:                  Frame Layout.       (line   75)
* STACK_DYNAMIC_OFFSET and virtual registers: Regs and Memory.
                                                             (line   83)
* STACK_GROWS_DOWNWARD:                  Frame Layout.       (line    9)
* STACK_PARMS_IN_REG_PARM_AREA:          Stack Arguments.    (line   79)
* STACK_POINTER_OFFSET:                  Frame Layout.       (line   58)
* STACK_POINTER_OFFSET and virtual registers: Regs and Memory.
                                                             (line   93)
* STACK_POINTER_REGNUM:                  Frame Registers.    (line    9)
* STACK_POINTER_REGNUM and virtual registers: Regs and Memory.
                                                             (line   83)
* stack_pointer_rtx:                     Frame Registers.    (line   85)
* stack_protect_set instruction pattern: Standard Names.     (line 1530)
* stack_protect_test instruction pattern: Standard Names.    (line 1540)
* STACK_PUSH_CODE:                       Frame Layout.       (line   17)
* STACK_REGS:                            Stack Registers.    (line   20)
* STACK_SAVEAREA_MODE:                   Storage Layout.     (line  377)
* STACK_SIZE_MODE:                       Storage Layout.     (line  389)
* standard pattern names:                Standard Names.     (line    6)
* STANDARD_INCLUDE_COMPONENT:            Driver.             (line  425)
* STANDARD_INCLUDE_DIR:                  Driver.             (line  417)
* STANDARD_STARTFILE_PREFIX:             Driver.             (line  337)
* STANDARD_STARTFILE_PREFIX_1:           Driver.             (line  344)
* STANDARD_STARTFILE_PREFIX_2:           Driver.             (line  351)
* STARTFILE_SPEC:                        Driver.             (line  210)
* STARTING_FRAME_OFFSET:                 Frame Layout.       (line   39)
* STARTING_FRAME_OFFSET and virtual registers: Regs and Memory.
                                                             (line   74)
* Statement Sequences:                   Statement Sequences.
                                                             (line    6)
* Statements:                            Statements.         (line    6)
* statements:                            Function Bodies.    (line    6)
* Static profile estimation:             Profile information.
                                                             (line   24)
* static single assignment:              SSA.                (line    6)
* STATIC_CHAIN:                          Frame Registers.    (line   77)
* STATIC_CHAIN_INCOMING:                 Frame Registers.    (line   78)
* STATIC_CHAIN_INCOMING_REGNUM:          Frame Registers.    (line   64)
* STATIC_CHAIN_REGNUM:                   Frame Registers.    (line   63)
* stdarg.h and register arguments:       Register Arguments. (line   47)
* STDC_0_IN_SYSTEM_HEADERS:              Misc.               (line  365)
* STMT_EXPR:                             Expression trees.   (line    6)
* STMT_IS_FULL_EXPR_P:                   Function Bodies.    (line   22)
* storage layout:                        Storage Layout.     (line    6)
* STORE_BY_PIECES_P:                     Costs.              (line  146)
* STORE_FLAG_VALUE:                      Misc.               (line  216)
* store_multiple instruction pattern:    Standard Names.     (line  160)
* strcpy:                                Storage Layout.     (line  215)
* STRICT_ALIGNMENT:                      Storage Layout.     (line  259)
* strict_low_part:                       RTL Declarations.   (line    9)
* strict_memory_address_p:               Addressing Modes.   (line  167)
* STRING_CST:                            Expression trees.   (line    6)
* STRING_POOL_ADDRESS_P:                 Flags.              (line  168)
* strlenM instruction pattern:           Standard Names.     (line  772)
* structure value address:               Aggregate Return.   (line    6)
* STRUCTURE_SIZE_BOUNDARY:               Storage Layout.     (line  251)
* structures, returning:                 Interface.          (line   10)
* subM3 instruction pattern:             Standard Names.     (line  222)
* SUBOBJECT:                             Function Bodies.    (line    6)
* SUBOBJECT_CLEANUP:                     Function Bodies.    (line    6)
* subreg:                                Regs and Memory.    (line   97)
* subreg and /s:                         Flags.              (line  190)
* subreg and /u:                         Flags.              (line  183)
* subreg and /u and /v:                  Flags.              (line  173)
* subreg, in strict_low_part:            RTL Declarations.   (line    9)
* subreg, special reload handling:       Regs and Memory.    (line  148)
* SUBREG_BYTE:                           Regs and Memory.    (line  169)
* SUBREG_PROMOTED_UNSIGNED_P:            Flags.              (line  173)
* SUBREG_PROMOTED_UNSIGNED_SET:          Flags.              (line  183)
* SUBREG_PROMOTED_VAR_P:                 Flags.              (line  190)
* SUBREG_REG:                            Regs and Memory.    (line  169)
* SUCCESS_EXIT_CODE:                     Host Misc.          (line   12)
* SUPPORTS_INIT_PRIORITY:                Macros for Initialization.
                                                             (line   58)
* SUPPORTS_ONE_ONLY:                     Label Output.       (line  227)
* SUPPORTS_WEAK:                         Label Output.       (line  208)
* SWITCH_BODY:                           Function Bodies.    (line    6)
* SWITCH_COND:                           Function Bodies.    (line    6)
* SWITCH_CURTAILS_COMPILATION:           Driver.             (line   33)
* SWITCH_STMT:                           Function Bodies.    (line    6)
* SWITCH_TAKES_ARG:                      Driver.             (line    9)
* SWITCHES_NEED_SPACES:                  Driver.             (line   47)
* SYMBOL_FLAG_ANCHOR:                    Special Accessors.  (line  106)
* SYMBOL_FLAG_EXTERNAL:                  Special Accessors.  (line   88)
* SYMBOL_FLAG_FUNCTION:                  Special Accessors.  (line   81)
* SYMBOL_FLAG_HAS_BLOCK_INFO:            Special Accessors.  (line  102)
* SYMBOL_FLAG_LOCAL:                     Special Accessors.  (line   84)
* SYMBOL_FLAG_SMALL:                     Special Accessors.  (line   93)
* SYMBOL_FLAG_TLS_SHIFT:                 Special Accessors.  (line   97)
* symbol_ref:                            Constants. 